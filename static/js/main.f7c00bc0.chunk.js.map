{"version":3,"sources":["components/radioButtonGroup/RadioButtonGroup.js","components/toggleSwitch/ToggleSwitch.js","components/iconButton/IconButton.js","containers/settingsBarContainer/SettingsBarContainer.js","components/paletteInput/PaletteInput.js","containers/paletteInputContainer/PaletteInputContainerHelpers.js","containers/paletteInputContainer/PaletteInputContainer.js","components/colorPair/ColorPair.js","components/colorStripe/ColorStripe.js","containers/colorStripeContainer/ColorStripeContainer.js","components/paletteDisplay/PaletteDisplay.js","containers/paletteAreaContainer/PaletteAreaContainerHelpers.js","containers/paletteAreaContainer/PaletteAreaContainer.js","App.js","reportWebVitals.js","index.js"],"names":["RadioButtonGroup","heading","name","options","disabled","selected","setState","handleChange","event","target","value","clickability","className","role","aria-labelledby","id","map","option","isSelected","htmlFor","type","onChange","checked","ToggleSwitch","optionLabels","showLabels","state","false","true","IconButton","icon","disableOnClick","onClick","onMouseDown","preventDefault","Provider","SettingsBarContainer","contrastStandard","setContrastStandard","grayscale","setGrayscale","setPreviousGrayscale","theme","setTheme","setPreviousTheme","noDarkColors","noLightColors","showPaletteInput","setShowPaletteInput","contrastStandardProps","themeProps","grayscaleProps","editPaletteProps","PaletteInput","rawPalette","handleInputChange","handleInputSubmit","disableSubmit","clearInputProps","aria-label","onSubmit","aria-multiline","placeholder","rows","cols","spellCheck","parseRawPalette","parsedPalette","hexMatch","match","forEach","hexRaw","rgbChannels","hex","exec","parseInt","hexToRgb","addParsedColor","toLowerCase","rgbMatch","rgbRaw","checkedRgbChannels","some","channel","checkRgbChannels","parseChannels","rgbToHex","hslMatch","hslRaw","hslChannels","h","s","l","a","Math","min","f","n","k","round","max","hslToRgb","index","checkHslChannels","channelsRaw","channelMatch","rgbChannel","hexChannel","Number","toString","length","newColorValue","rgb","color","push","thresholdLuminance","sqrt","getPaletteData","paletteData","luminance","channelLuminance","sRgb","getLuminance","grayscaleEquivalent","rgbGrayEquivalent","singleChannelHex","repeat","getGrayscaleEquivalent","colorData","PaletteInputContainer","setPaletteData","useState","setRawPalette","paletteLength","setPaletteLength","inputIsEmpty","inputTextArea","document","getElementById","Object","getOwnPropertyDescriptor","window","HTMLTextAreaElement","prototype","set","call","dispatchEvent","Event","bubbles","rawPaletteInput","ColorPair","pairColor","pairGrayscaleEquivalent","contrast","hoverGrowClass","textSize","hidePairs","style","data-testid","EPSILON","ColorStripe","stripeColor","filteredColorPairs","maxPairsCount","placeholdersRequired","stripeTheme","backgroundColor","minHeight","colorPair","flex","ColorStripeContainer","displayStripe","colorPairs","PaletteDisplay","allColorPairs","noThemeInPalette","values","includes","getAllColorPairData","rawColorPairs","colorOuter","colorInner","iStop","jStop","i","j","color1","color2","hex1","hex2","setColorPairData","getContrast","getRawColorPairs","allFilteredColorPairs","entries","getFilteredColorPairs","aa","aaa","aaPairsCount","luminance1","luminance2","key","value1","value2","pairingData","sortedColorPairs","pairing","assign","sort","b","getSortedColorPairs","filter","pair","PaletteAreaContainer","setNoDarkColors","setNoLightColors","setAllColorPairs","setMaxPairsCount","maxPairs","App","previousGrayscale","previousTheme","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+YAmEeA,MA7Df,YAOI,IANFC,EAMC,EANDA,QACAC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,SACAC,EAEC,EAFDA,SACAC,EACC,EADDA,SAEMC,EAAe,SAACC,GACpBF,EAASE,EAAMC,OAAOC,QAGlBC,EAAeP,EAAW,WAAa,YAE7C,OACE,sBAAMQ,UAAS,iDAA4CD,GAA3D,SACE,0BACEC,UAAU,gCACVC,KAAK,aACLC,kBAAiBZ,EAHnB,UAKE,oBAAIU,UAAU,8BAA8BG,GAAIb,EAAhD,SACGD,IAEFE,EAAQa,KAAI,SAACC,GACZ,IAAMC,EACJD,IAAWZ,EAAW,uCAAyC,GACjE,OACE,wBAEEc,QAASF,EACTL,UAAS,mCAA8BM,GAHzC,UAKE,uBACEN,UAAU,4BACVQ,KAAK,QACLlB,KAAMA,EACNa,GAAIE,EACJP,MAAOO,EACPI,SAAUd,EACVe,QAASL,IAAWZ,EACpBD,SAAUA,IAEZ,sBAAMQ,UAAU,iCAAhB,SAAkDK,MAd7CA,Y,MCgCJM,MA7Df,YAQI,IAPFtB,EAOC,EAPDA,QACAC,EAMC,EANDA,KACAsB,EAKC,EALDA,aACAC,EAIC,EAJDA,WACArB,EAGC,EAHDA,SACAsB,EAEC,EAFDA,MACApB,EACC,EADDA,SAMMK,EAAeP,EAAW,WAAa,YAE7C,OACE,sBACEQ,UAAS,uCAAkCc,EAAlC,2BAA0Df,GADrE,SAGE,wBAAOQ,QAASjB,EAAMU,UAAU,uBAAhC,UACE,oBAAIA,UAAU,yBAAd,SAAwCX,IACxC,uBACEW,UAAU,uBACVQ,KAAK,WACLlB,KAAMA,EACNa,GAAIb,EACJQ,MAAOgB,EAAQF,EAAaG,MAAQH,EAAaI,KACjDP,SAlBa,SAACb,GACpBF,EAASE,EAAMC,OAAOC,QAAUc,EAAaI,OAkBvCN,QAASI,EACTtB,SAAUA,IAEZ,qBAAKQ,UAAU,2BAAf,SACE,sBAAKA,UAAU,mCAAf,UACE,qBAAKA,UAAU,gCAAf,SACE,sBAAMA,UAAU,2BAAhB,SACGa,GAAcD,EAAaI,SAGhC,qBAAKhB,UAAU,0BACf,qBAAKA,UAAU,gCAAf,SACE,sBAAMA,UAAU,4BAAhB,SACGa,GAAcD,EAAaG,qB,aCF7BE,MArCf,YAA+E,IAAzD5B,EAAwD,EAAxDA,QAASC,EAA+C,EAA/CA,KAAM4B,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,eAAgBL,EAAmB,EAAnBA,MAAOpB,EAAY,EAAZA,SAS1DK,EAAeoB,GAAkBL,EAAQ,WAAa,YAE5D,OACE,yBACEd,UAAS,mCAA8BD,GACvCS,KAAK,SACLlB,KAAMA,EACN8B,QAfgB,WAClB1B,KAeE2B,YAZwB,SAACzB,GAC3BA,EAAM0B,kBAYJ9B,SAAU2B,GAAkBL,EAN9B,UAQE,cAAC,IAAYS,SAAb,CAAsBzB,MAAO,CAAEE,UAAW,qBAA1C,SACGkB,IAEH,oBAAIlB,UAAU,uBAAd,SAAsCX,Q,OC8D7BmC,MAnFf,YAaI,IAZFC,EAYC,EAZDA,iBACAC,EAWC,EAXDA,oBACAC,EAUC,EAVDA,UACAC,EASC,EATDA,aACAC,EAQC,EARDA,qBACAC,EAOC,EAPDA,MACAC,EAMC,EANDA,SACAC,EAKC,EALDA,iBACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,oBAEMC,EAAwB,CAC5BhD,QAAS,mBACTC,KAAM,oBACNC,QAAS,CAAC,KAAM,OAChBC,SAAU2C,EACV1C,SAAUgC,EACV/B,SAAUgC,GAGNY,EAAa,CACjBjD,QAAS,QACTC,KAAM,QACNC,QAAS,CAAC,OAAQ,OAAQ,SAC1BC,SAAU2C,GAAoBF,GAAgBC,EAC9CzC,SAAUqC,EACVpC,SAAUqC,GAGNQ,EAAiB,CACrBlD,QAAS,oBACTC,KAAM,iBACNsB,aAAc,CAAEI,KAAM,KAAMD,MAAO,OACnCF,YAAY,EACZrB,SAAU2C,EACVrB,MAAOa,EACPjC,SAAUkC,GAUNY,EAAmB,CACvBnD,QAAS,kBACTC,KAAM,eACN4B,KAAM,cAAC,IAAD,IACNC,gBAAgB,EAChBL,MAAOqB,EACPzC,SAb0B,WAC1BmC,EAAqBF,GACrBK,EAAiBF,GAEjBM,GAAoB,KAYtB,OACE,qCACE,cAAC,EAAD,eAAsBC,IACtB,cAAC,EAAD,eAAsBC,IACtB,cAAC,EAAD,eAAkBC,IAClB,cAAC,EAAD,eAAgBC,Q,MCbPC,MApDf,YAMI,IALFC,EAKC,EALDA,WACAC,EAIC,EAJDA,kBACAC,EAGC,EAHDA,kBACAC,EAEC,EAFDA,cACAC,EACC,EADDA,gBAEM/C,EAAe8C,EAAgB,WAAa,YAElD,OACE,yBAAS7C,UAAU,gBAAnB,SACE,uBAAM+C,aAAW,OAAOC,SAAUJ,EAAlC,UACE,0BAAS5C,UAAU,8BAAnB,UACE,uBAAOA,UAAU,yBAAyBO,QAAQ,gBAAlD,yBAGA,uBACEP,UAAS,qEAAgED,GACzES,KAAK,SACLV,MAAM,IACNN,SAAUqD,OAGd,0BACE7C,UAAU,2BACVQ,KAAK,WACLlB,KAAK,gBACLa,GAAG,gBACH8C,iBAAe,OACfC,YAAY,wBACZC,KAAM,GACNC,KAAM,GACNtD,MAAO4C,EACPjC,SAAUkC,EACVU,WAAW,UAEb,yBAASrD,UAAU,iCAAnB,SACE,cAAC,EAAD,eAAgB8C,YC7CnB,SAASQ,EAAgBZ,GAC9B,IAAMa,EAAgB,GAGhBC,EAAWd,EAAWe,MADT,kBAGfD,GACFA,EAASE,SAAQ,SAACC,GAChB,IAAMC,EAqEZ,SAAkBC,GAChB,IAAMJ,EAAQ,wCAAwCK,KAAKD,GAE3D,GAAIJ,EACF,MAAO,CACLM,SAASN,EAAM,GAAI,IACnBM,SAASN,EAAM,GAAI,IACnBM,SAASN,EAAM,GAAI,KA5ECO,CAASL,GAG7BM,EAFYN,EAAOO,cAECN,EAAaL,MAIrC,IACMY,EAAWzB,EAAWe,MADT,iEAGfU,GACFA,EAAST,SAAQ,SAACU,GAChB,IACMC,EAiCZ,SAA0BT,GACxB,OAAIA,EAAYU,MAAK,SAACC,GAAD,OAAaA,EAAU,OACbX,EAAYxD,KAAI,SAACmE,GAAD,OAC3CA,EAAU,IAAM,IAAMA,KAIjBX,EAxCsBY,CADPC,EAAcL,IAIlCH,EAFYS,EAASL,GAEDA,EAAoBd,MAI5C,IACMoB,EAAWjC,EAAWe,MADT,8EAcnB,OAXIkB,GACFA,EAASjB,SAAQ,SAACkB,GAChB,IAEMhB,EAsEZ,SAAkBiB,GAEhB,IAAMC,EAAID,EAAY,GAChBE,EAAIF,EAAY,GAAK,IACrBG,EAAIH,EAAY,GAAK,IAErBI,EAAIF,EAAIG,KAAKC,IAAIH,EAAG,EAAIA,GAExBI,EAAI,SAACC,GAAD,IAAIC,EAAJ,wDAASD,EAAIP,EAAI,IAAM,GAAvB,OACRI,KAAKK,MAAM,KAAOP,EAAIC,EAAIC,KAAKM,KAAK,EAAGN,KAAKC,IAAIG,EAAI,EAAG,EAAIA,EAAG,OAEhE,MAAO,CAACF,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAjFEK,CA8B1B,SAA0BZ,GACxB,OAAIA,EAAY,GAAK,KAAOA,EAAY,GAAK,KAAOA,EAAY,GAAK,IACtCA,EAAYzE,KAAI,SAACmE,EAASmB,GACrD,IAAIF,EAAgB,IAAVE,EAAc,IAAM,IAC9B,OAAOnB,EAAUiB,EAAMA,EAAMjB,KAIxBM,EAvCsBc,CADPlB,EAAcG,KAKlCX,EAFYS,EAASd,GAEDA,EAAaL,MAI9BA,EAGT,SAASkB,EAAcmB,GACrB,IACMC,EAAeD,EAAYnC,MADV,eAGvB,GAAIoC,EACF,MAAO,CAACA,EAAa,GAAIA,EAAa,GAAIA,EAAa,IAuC3D,SAASnB,EAASd,GAChB,IAAIC,EAAM,GAYV,OAVAD,EAAYF,SAAQ,SAACoC,GACnB,IAAIC,EAAaC,OAAOF,GAAYG,SAAS,IAEnB,IAAtBF,EAAWG,SACbH,EAAa,IAAMA,GAGrBlC,GAAOkC,KAGFlC,EAiBT,SAASI,EAAeJ,EAAKD,EAAaL,GACxC,IAAM4C,EAAgB,CACpBtC,IAAKA,EACLuC,IAAKxC,GAGaL,EAAce,MAChC,SAAC+B,GAAD,OAAWA,EAAMxC,MAAQsC,EAActC,QAIvCN,EAAc+C,KAAKH,GAKvB,IAAMI,IAAuB,GAAMrB,KAAKsB,KAAK,MAAS,EAE/C,SAASC,EAAelD,GAC7B,IAAMmD,EAAc,GAiBpB,OAfAnD,EAAcG,SAAQ,SAAC2C,GACrB,IAAMM,EAiBV,SAAsBP,GACpB,IAAMQ,EAAmB,GAgBzB,OAdAR,EAAI1C,SAAQ,SAACa,EAASmB,GACpB,IAAMmB,EAAOtC,EAAU,IAErBqC,EAAiBlB,GADfmB,GAAQ,OACgBA,EAAO,MAEjC,UAA4BA,EAAO,MAAS,MAAU,QAKxD,MAASD,EAAiB,GAC1B,MAASA,EAAiB,GAC1B,MAASA,EAAiB,GAhCRE,CAAaT,EAAMD,KAC/BW,EAoCV,SAAgCX,GAC9B,IAAMY,EAAoB,MAASZ,EAAI,GAAK,MAASA,EAAI,GAAK,MAASA,EAAI,GAEvEa,EAAmB/B,KAAKK,MAAMyB,GAAmBf,SAAS,IAC9B,IAA5BgB,EAAiBf,SACnBe,EAAmB,IAAMA,GAE3B,OAAOA,EAAiBC,OAAO,GA3CDC,CAAuBd,EAAMD,KACnDtE,EAAQ6E,GAAaJ,EAAqB,QAAU,OAEpDa,EAAY,CAChBvD,IAAKwC,EAAMxC,IACXkD,oBAAqBA,EACrBJ,UAAWA,EACX7E,MAAOA,GAGT4E,EAAYJ,KAAKc,MAGZV,EC7EMW,MAjEf,YAII,IAHFlF,EAGC,EAHDA,iBACAmF,EAEC,EAFDA,eACA1E,EACC,EADDA,kBACC,EACmC2E,mBAAS,IAD5C,mBACM7E,EADN,KACkB8E,EADlB,OAEyCD,mBAAS,GAFlD,mBAEME,EAFN,KAEqBC,EAFrB,KA6BKC,EAA8B,KAAfjF,EAEfI,EAAkB,CACtBzD,QAAS,gBACTC,KAAM,gBACN4B,KAAM,cAAC,IAAD,IACNC,gBAAgB,EAChBL,MAAO6G,EACPjI,SApByB,WACzB,IAAMkI,EAAgBC,SAASC,eAAe,iBAEfC,OAAOC,yBACpCC,OAAOC,oBAAoBC,UAC3B,SACAC,IACqBC,KAAKT,EAAe,IAE3CA,EAAcU,cAAc,IAAIC,MAAM,SAAU,CAAEC,SAAS,OAc7D,OACE,mCACGrG,GACC,cAAC,EAAD,CACEO,WAAYA,EACZC,kBAzCkB,SAAC/C,GACzB,IAAM6I,EAAkB7I,EAAMC,OAAOC,MAE/ByD,EAAgBD,EAAgB1D,EAAMC,OAAOC,OAE/CyD,IACF+D,EAAeb,EAAelD,IAC9BmE,EAAiBnE,EAAc2C,SAGjCsB,EAAciB,IAgCR7F,kBAAmBA,EACnBC,cAAe4E,EAAgB,EAC/B3E,gBAAiBA,O,aCjBZ4F,MAvCf,YAQI,IAPFC,EAOC,EAPDA,UACAC,EAMC,EANDA,wBACAC,EAKC,EALDA,SACAC,EAIC,EAJDA,eACAC,EAGC,EAHDA,SACAC,EAEC,EAFDA,UACArH,EACC,EADDA,UAEA,OACE,0BACE3B,UAAS,oBAAegJ,GAAf,OAA2BF,GACpCG,MAAO,CAAE5C,MAAM,IAAD,OAAM1E,EAAYiH,EAA0BD,IAC1DO,cAAY,aAHd,UAKE,oBAAGlJ,UAAU,uBAAb,UACGkF,KAAKK,MAAoC,IAA7BsD,EAAW7C,OAAOmD,UAAiB,GADlD,UAGA,oBAAInJ,UAAU,sBAAd,SAAqC2I,IACrC,cAAC,IAAYpH,SAAb,CAAsBzB,MAAO,CAAEE,UAAW,qBAA1C,SACE,cAAC,IAAD,MAEF,oBAAGA,UAAS,uDAAkD+I,GAA9D,UACGA,EADH,e,MC2DSK,MAlFf,YAWI,IAVFC,EAUC,EAVDA,YACAtC,EASC,EATDA,oBACAuC,EAQC,EARDA,mBACAC,EAOC,EAPDA,cACAC,EAMC,EANDA,qBACAV,EAKC,EALDA,eACAE,EAIC,EAJDA,UACAvH,EAGC,EAHDA,iBACAE,EAEC,EAFDA,UACA8H,EACC,EADDA,YAEA,OACE,0BACEzJ,UAAU,eACViJ,MAAO,CACLS,gBAAgB,IAAD,OAAM/H,EAAYoF,EAAsBsC,IAEzDH,cAAY,eALd,UAOE,0BACElJ,UAAU,gCACViJ,MAAO,CAAEU,UAAU,GAAD,OAAqB,EAAhBJ,EAAoB,GAAzB,OAFpB,UAIGD,GACCA,EAAmBlJ,KAAI,SAACwJ,GACtB,OACE,cAAC,EAAD,CAEEjB,UAAWiB,EAAU/F,IACrB+E,wBAAyBgB,EAAU7C,oBACnC8B,SAAUe,EAAUf,SACpBC,eAAgBA,EAChBC,SAAUa,EAAUnI,GACpBuH,UAAWA,EACXrH,UAAWA,GAPNiI,EAAU/F,QAWtB2F,EAAuB,GACtB,qBACExJ,UAAU,4BACViJ,MAAO,CACLY,KAAK,GAAD,OAAKL,EAAL,YAA6BA,EAA7B,YAAqDA,EAArD,YAKZ,qBACExJ,UAAS,6DAAwDyJ,EAAxD,mCAA8FJ,GADzG,UAGGA,EACD,kEAC8BA,EAD9B,gEAE2CA,EAF3C,mDC+BOS,MArFf,YAQI,IACEC,EARJ1D,EAOC,EAPDA,MACA2D,EAMC,EANDA,WACAT,EAKC,EALDA,cACApH,EAIC,EAJDA,iBACAV,EAGC,EAHDA,iBACAE,EAEC,EAFDA,UACAG,EACC,EADDA,MAIEiI,EADY,SAAVjI,GAAoBA,IAAUuE,EAAMvE,MAMxC,IAAMkH,EAAY7G,EAAmB,oBAAsB,GAErDqH,EAAuB,GACzBQ,IACFR,EAAoB,GAASD,EAAgBS,EAAU,aACvDR,EAAoB,IAAUD,EAAgBS,EAAU,eAG1D,IAAMlB,EACJS,EAAgB,EAAI,iCAAmC,GAEzD,OACE,mCACGQ,GACC,cAAC,EAAD,CACEV,YAAahD,EAAMxC,IACnBkD,oBAAqBV,EAAMU,oBAC3BuC,mBAAoBU,GAAcA,EAAWvI,GAC7C8H,cAAeA,EACfC,qBACEQ,GAAcR,EAAqB/H,GAErCqH,eAAgBA,EAChBE,UAAWA,EACXvH,iBAAkBA,EAClBE,UAAWA,EACX8H,YAAapD,EAAMvE,W,MC6BdmI,MArEf,YAQI,IAPFvD,EAOC,EAPDA,YACAwD,EAMC,EANDA,cACAX,EAKC,EALDA,cACApH,EAIC,EAJDA,iBACAV,EAGC,EAHDA,iBACAE,EAEC,EAFDA,UACAG,EACC,EADDA,MAEA,OACE,yBAAS9B,UAAU,kBAAnB,SACG0G,EAAYtG,KAAI,SAACiG,GAChB,OACE,cAAC,EAAD,CAEEA,MAAOA,EACP2D,WAAYE,EAAc7D,EAAMxC,KAChC0F,cAAeA,EACfpH,iBAAkBA,EAClBV,iBAAkBA,EAClBE,UAAWA,EACXG,MAAOA,GAPFuE,EAAMxC,WCtBhB,SAASsG,EAAiBzD,EAAa5E,GAC5C,OAAQ4E,EAAYpC,MAAK,SAAC+B,GAAD,OAAW0B,OAAOqC,OAAO/D,GAAOgE,SAASvI,MAG7D,SAASwI,EAAoB5D,GAMlC,IALA,IAAM6D,EAyBR,SAA0B7D,GACxB,IAAM6D,EAAgB,GAGtB7D,EAAYhD,SAAQ,SAAC8G,GACnBD,EAAcC,EAAW3G,KAAO,GAEhC6C,EAAYhD,SAAQ,SAAC+G,GACfA,EAAW5G,MAAQ2G,EAAW3G,MAChC0G,EAAcC,EAAW3G,KAAK4G,EAAW5G,KAAO,UAOtD,IAFA,IAAM6G,EAAQhE,EAAYR,OAAS,EAC7ByE,EAAQjE,EAAYR,OACjB0E,EAAI,EAAGA,EAAIF,EAAOE,IACzB,IAAK,IAAIC,EAAID,EAAI,EAAGC,EAAIF,EAAOE,IAAK,CAClC,IAAMC,EAASpE,EAAYkE,GACrBG,EAASrE,EAAYmE,GAErBG,EAAOF,EAAOjH,IACdoH,EAAOF,EAAOlH,IAEpBqH,EACEX,EACAS,EACAC,EACA,sBACAF,EAAOhE,oBACP+D,EAAO/D,qBAGT,IAAI8B,EAAWsC,EAAYL,EAAOnE,UAAWoE,EAAOpE,WACpDkC,EAAW3D,KAAKK,MAAoC,IAA7BsD,EAAW7C,OAAOmD,UAAiB,GAC1D+B,EAAiBX,EAAeS,EAAMC,EAAM,WAAYpC,GAEpDA,GAAY,GACdqC,EAAiBX,EAAeS,EAAMC,EAAM,KAAM,OAClDC,EAAiBX,EAAeS,EAAMC,EAAM,MAAO,QAC1CpC,GAAY,KACrBqC,EAAiBX,EAAeS,EAAMC,EAAM,KAAM,OAClDC,EAAiBX,EAAeS,EAAMC,EAAM,MAAO,UAC1CpC,GAAY,GACrBqC,EAAiBX,EAAeS,EAAMC,EAAM,KAAM,SAKxD,OAAOV,EA1Eea,CAAiB1E,GAEjC2E,EAAwB,GAC1B9B,EAAgB,EAEpB,MAAmCxB,OAAOuD,QAAQf,GAAlD,eAAkE,CAAC,IAAD,sBAAtDlE,EAAsD,OAC9CkF,EAD8C,yBACzDC,EADyD,KACrDC,EADqD,KAGhEJ,EAAsBhF,GAAS,GAE/BgF,EAAsBhF,GAAtB,GAAqCmF,EACrCH,EAAsBhF,GAAtB,IAAsCoF,EAEtC,IAAMC,EAAeF,EAAGtF,OACxBmF,EAAsBhF,GAAtB,aAA+CqF,EAC/CL,EAAsBhF,GAAtB,cAAgDoF,EAAIvF,OAEhDwF,EAAenC,IACjBA,EAAgBmC,GAIpB,MAAO,CAACL,EAAuB9B,GAuDjC,SAAS4B,EAAYQ,EAAYC,GAS/B,OANID,EAAaC,GACHD,EAAa,MAASC,EAAa,MAEnCA,EAAa,MAASD,EAAa,KAMnD,SAAST,EAAiBX,EAAeS,EAAMC,EAAMY,EAAKC,EAAQC,GAChExB,EAAcS,GAAMC,GAAMY,GAAOC,EACjCvB,EAAcU,GAAMD,GAAMa,GAAOE,GAAUD,EAG7C,SAASP,EAAsBS,GAC7B,IAEMR,EAMR,SAA6BQ,GAC3B,IAAMC,EAAmB,GAUzB,OARAlE,OAAOuD,QAAQU,GAAatI,SAAQ,SAACwI,GACnCD,EAAiB3F,KAAKyB,OAAOoE,OAAO,GAAI,CAAEtI,IAAKqI,EAAQ,IAAMA,EAAQ,QAGvED,EAAiBG,MAAK,SAACnH,EAAGoH,GACxB,OAAOA,EAAExD,SAAW5D,EAAE4D,YAGjBoD,EAnBkBK,CAAoBN,GAEjBO,QAAO,SAACC,GAAD,MAAU,OAAQA,KAC/Cf,EAAMD,EAAGe,QAAO,SAACC,GAAD,MAAU,QAASA,KAEzC,MAAO,CAAChB,EAAIC,GCpCCgB,MAzDf,YAQI,IAPFhL,EAOC,EAPDA,iBACAE,EAMC,EANDA,UACAG,EAKC,EALDA,MACA4K,EAIC,EAJDA,gBACAC,EAGC,EAHDA,iBACAxK,EAEC,EAFDA,iBACAC,EACC,EADDA,oBACC,EACqCmF,mBAAS,IAD9C,mBACMb,EADN,KACmBY,EADnB,OAEyCC,mBAAS,IAFlD,mBAEM2C,EAFN,KAEqB0C,EAFrB,OAGyCrF,mBAAS,GAHlD,mBAGMgC,EAHN,KAGqBsD,EAHrB,KAmBD,OACE,qCACE,cAAC,EAAD,CACE1K,iBAAkBA,EAClBmF,eAAgBA,EAChB1E,kBAnBoB,SAAChD,GACzBA,EAAM0B,iBAD6B,MAGJgJ,EAAoB5D,GAHhB,mBAG5BsD,EAH4B,KAGhB8C,EAHgB,KAKnCF,EAAiB5C,GACjB6C,EAAiBC,GAEjBJ,EAAgBvC,EAAiBzD,EAAa,SAC9CiG,EAAiBxC,EAAiBzD,EAAa,UAE/CtE,GAAoB,MAUlB,cAAC,EAAD,CACEsE,YAAaA,EACbwD,cAAeA,EACfX,cAAeA,EACfpH,iBAAkBA,EAClBV,iBAAkBA,EAClBE,UAAWA,EACXG,MAAOA,Q,MC2BAiL,MAzEf,WAAgB,IAAD,EACmCxF,mBAAS,MAD5C,mBACN9F,EADM,KACYC,EADZ,OAEqB6F,oBAAS,GAF9B,mBAEN5F,EAFM,KAEKC,EAFL,OAGqC2F,mBAAS5F,GAH9C,mBAGNqL,EAHM,KAGanL,EAHb,OAIa0F,mBAAS,QAJtB,mBAINzF,EAJM,KAICC,EAJD,OAK6BwF,mBAASzF,GALtC,mBAKNmL,EALM,KAKSjL,EALT,OAM2BuF,oBAAS,GANpC,mBAMNtF,EANM,KAMQyK,EANR,OAO6BnF,oBAAS,GAPtC,mBAONrF,EAPM,KAOSyK,EAPT,OAQmCpF,oBAAS,GAR5C,mBAQNpF,EARM,KAQYC,EARZ,KAoCb,OAzBA8K,qBAAU,WACJ/K,GACFP,GAAa,GACbG,EAAS,SAELE,GAAgBC,IAClBF,EAAiB,UAGnBJ,EAAaoL,GAGXjL,EADEE,GAAgBC,EACTD,EAAe,QAAU,OAEzBgL,MAGZ,CACD9K,EACAF,EACAC,EACA8K,EACAC,IAIA,sBAAKjN,UAAU,MAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,cAAC,EAAD,CACEyB,iBAAkBA,EAClBC,oBAAqBA,EACrBC,UAAWA,EACXC,aAAcA,EACdC,qBAAsBA,EACtBC,MAAOA,EACPC,SAAUA,EACVC,iBAAkBA,EAClBC,aAAcA,EACdC,cAAeA,EACfC,iBAAkBA,EAClBC,oBAAqBA,MAKzB,sBAAMpC,UAAU,YAAhB,SACE,cAAC,EAAD,CACEyB,iBAAkBA,EAClBE,UAAWA,EACXG,MAAOA,EACP4K,gBAAiBA,EACjBC,iBAAkBA,EAClBxK,iBAAkBA,EAClBC,oBAAqBA,UC3DhB+K,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjG,SAASC,eAAe,SAM1BqF,M","file":"static/js/main.f7c00bc0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./RadioButtonGroup.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction RadioButtonGroup({\r\n  heading,\r\n  name,\r\n  options,\r\n  disabled,\r\n  selected,\r\n  setState\r\n}) {\r\n  const handleChange = (event) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  const clickability = disabled ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <form className={`radio-button-group radio-button-group--${clickability}`}>\r\n      <section\r\n        className=\"radio-button-group__container\"\r\n        role=\"radiogroup\"\r\n        aria-labelledby={name}\r\n      >\r\n        <h1 className=\"radio-button-group__heading\" id={name}>\r\n          {heading}\r\n        </h1>\r\n        {options.map((option) => {\r\n          const isSelected =\r\n            option === selected ? \" radio-button-group__label--selected\" : \"\";\r\n          return (\r\n            <label\r\n              key={option}\r\n              htmlFor={option}\r\n              className={`radio-button-group__label${isSelected}`}\r\n            >\r\n              <input\r\n                className=\"radio-button-group__input\"\r\n                type=\"radio\"\r\n                name={name}\r\n                id={option}\r\n                value={option}\r\n                onChange={handleChange}\r\n                checked={option === selected}\r\n                disabled={disabled}\r\n              />\r\n              <span className=\"radio-button-group__label-text\">{option}</span>\r\n            </label>\r\n          );\r\n        })}\r\n      </section>\r\n    </form>\r\n  );\r\n}\r\n\r\nRadioButtonGroup.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  selected: PropTypes.string.isRequired,\r\n  setState: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RadioButtonGroup;\r\n","import React from \"react\";\r\n\r\nimport \"./ToggleSwitch.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ToggleSwitch({\r\n  heading,\r\n  name,\r\n  optionLabels,\r\n  showLabels,\r\n  disabled,\r\n  state,\r\n  setState\r\n}) {\r\n  const handleChange = (event) => {\r\n    setState(event.target.value === optionLabels.true);\r\n  };\r\n\r\n  const clickability = disabled ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <form\r\n      className={`toggle-switch toggle-switch--${state} toggle-switch--${clickability}`}\r\n    >\r\n      <label htmlFor={name} className=\"toggle-switch__label\">\r\n        <h1 className=\"toggle-switch__heading\">{heading}</h1>\r\n        <input\r\n          className=\"toggle-switch__input\"\r\n          type=\"checkbox\"\r\n          name={name}\r\n          id={name}\r\n          value={state ? optionLabels.false : optionLabels.true}\r\n          onChange={handleChange}\r\n          checked={state}\r\n          disabled={disabled}\r\n        />\r\n        <div className=\"toggle-switch__container\">\r\n          <div className=\"toggle-switch__sliding-container\">\r\n            <div className=\"toggle-switch__text-container\">\r\n              <span className=\"toggle-switch__text-true\">\r\n                {showLabels && optionLabels.true}\r\n              </span>\r\n            </div>\r\n            <div className=\"toggle-switch__circle\"></div>\r\n            <div className=\"toggle-switch__text-container\">\r\n              <span className=\"toggle-switch__text-false\">\r\n                {showLabels && optionLabels.false}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\n\r\nToggleSwitch.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  optionLabels: PropTypes.objectOf(PropTypes.string).isRequired,\r\n  showLabels: PropTypes.bool.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  state: PropTypes.bool.isRequired,\r\n  setState: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import React from \"react\";\r\n\r\nimport { IconContext } from \"react-icons\";\r\n\r\nimport \"./IconButton.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction IconButton({ heading, name, icon, disableOnClick, state, setState }) {\r\n  const handleClick = () => {\r\n    setState();\r\n  };\r\n\r\n  const preventFocusOnClick = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const clickability = disableOnClick && state ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <button\r\n      className={`icon-button icon-button--${clickability}`}\r\n      type=\"button\"\r\n      name={name}\r\n      onClick={handleClick}\r\n      onMouseDown={preventFocusOnClick}\r\n      disabled={disableOnClick && state}\r\n    >\r\n      <IconContext.Provider value={{ className: \"icon-button__icon\" }}>\r\n        {icon}\r\n      </IconContext.Provider>\r\n      <h1 className=\"icon-button__heading\">{heading}</h1>\r\n    </button>\r\n  );\r\n}\r\n\r\nIconButton.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  icon: PropTypes.element.isRequired,\r\n  disableOnClick: PropTypes.bool.isRequired,\r\n  state: PropTypes.bool.isRequired,\r\n  setState: PropTypes.func.isRequired\r\n};\r\n\r\nexport default IconButton;\r\n","import React from \"react\";\r\n\r\nimport RadioButtonGroup from \"../../components/radioButtonGroup/RadioButtonGroup\";\r\nimport ToggleSwitch from \"../../components/toggleSwitch/ToggleSwitch\";\r\nimport IconButton from \"../../components/iconButton/IconButton\";\r\n\r\nimport { FaPalette } from \"react-icons/fa\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction SettingsBarContainer({\r\n  contrastStandard,\r\n  setContrastStandard,\r\n  grayscale,\r\n  setGrayscale,\r\n  setPreviousGrayscale,\r\n  theme,\r\n  setTheme,\r\n  setPreviousTheme,\r\n  noDarkColors,\r\n  noLightColors,\r\n  showPaletteInput,\r\n  setShowPaletteInput\r\n}) {\r\n  const contrastStandardProps = {\r\n    heading: \"WCAG \\n standard\",\r\n    name: \"contrast-standard\",\r\n    options: [\"aa\", \"aaa\"],\r\n    disabled: showPaletteInput,\r\n    selected: contrastStandard,\r\n    setState: setContrastStandard\r\n  };\r\n\r\n  const themeProps = {\r\n    heading: \"Theme\",\r\n    name: \"theme\",\r\n    options: [\"dark\", \"both\", \"light\"],\r\n    disabled: showPaletteInput || noDarkColors || noLightColors,\r\n    selected: theme,\r\n    setState: setTheme\r\n  };\r\n\r\n  const grayscaleProps = {\r\n    heading: \"Grayscale \\n mode\",\r\n    name: \"grayscale-mode\",\r\n    optionLabels: { true: \"on\", false: \"off\" },\r\n    showLabels: true,\r\n    disabled: showPaletteInput,\r\n    state: grayscale,\r\n    setState: setGrayscale\r\n  };\r\n\r\n  const editPaletteSetState = () => {\r\n    setPreviousGrayscale(grayscale);\r\n    setPreviousTheme(theme);\r\n\r\n    setShowPaletteInput(true);\r\n  };\r\n\r\n  const editPaletteProps = {\r\n    heading: \"Edit \\n palette\",\r\n    name: \"edit-palette\",\r\n    icon: <FaPalette />,\r\n    disableOnClick: true,\r\n    state: showPaletteInput,\r\n    setState: editPaletteSetState\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <RadioButtonGroup {...contrastStandardProps} />\r\n      <RadioButtonGroup {...themeProps} />\r\n      <ToggleSwitch {...grayscaleProps} />\r\n      <IconButton {...editPaletteProps} />\r\n    </>\r\n  );\r\n}\r\n\r\nSettingsBarContainer.propTypes = {\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  setContrastStandard: PropTypes.func.isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  setGrayscale: PropTypes.func.isRequired,\r\n  setPreviousGrayscale: PropTypes.func.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired,\r\n  setTheme: PropTypes.func.isRequired,\r\n  setPreviousTheme: PropTypes.func.isRequired,\r\n  noDarkColors: PropTypes.bool.isRequired,\r\n  noLightColors: PropTypes.bool.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  setShowPaletteInput: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsBarContainer;\r\n","import React from \"react\";\r\n\r\nimport IconButton from \"../../components/iconButton/IconButton\";\r\n\r\nimport \"./PaletteInput.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction PaletteInput({\r\n  rawPalette,\r\n  handleInputChange,\r\n  handleInputSubmit,\r\n  disableSubmit,\r\n  clearInputProps\r\n}) {\r\n  const clickability = disableSubmit ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <section className=\"palette-input\">\r\n      <form aria-label=\"form\" onSubmit={handleInputSubmit}>\r\n        <section className=\"palette-input__top-controls\">\r\n          <label className=\"palette-input__heading\" htmlFor=\"palette-input\">\r\n            Add palette\r\n          </label>\r\n          <input\r\n            className={`palette-input__submit-button palette-input__submit-button--${clickability}`}\r\n            type=\"submit\"\r\n            value=\"+\"\r\n            disabled={disableSubmit}\r\n          />\r\n        </section>\r\n        <textarea\r\n          className=\"palette-input__text-area\"\r\n          type=\"textarea\"\r\n          name=\"palette-input\"\r\n          id=\"palette-input\"\r\n          aria-multiline=\"true\"\r\n          placeholder=\"Enter a color palette\"\r\n          rows={12}\r\n          cols={36}\r\n          value={rawPalette}\r\n          onChange={handleInputChange}\r\n          spellCheck=\"false\"\r\n        />\r\n        <section className=\"palette-input__bottom-controls\">\r\n          <IconButton {...clearInputProps} />\r\n        </section>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nPaletteInput.propTypes = {\r\n  rawPalette: PropTypes.string.isRequired,\r\n  handleInputChange: PropTypes.func.isRequired,\r\n  handleInputSubmit: PropTypes.func.isRequired,\r\n  disableSubmit: PropTypes.bool.isRequired,\r\n  clearInputProps: PropTypes.object.isRequired\r\n};\r\n\r\nexport default PaletteInput;\r\n","export function parseRawPalette(rawPalette) {\r\n  const parsedPalette = [];\r\n\r\n  const hexPattern = /([a-f\\d]{6})/gi;\r\n  const hexMatch = rawPalette.match(hexPattern);\r\n\r\n  if (hexMatch) {\r\n    hexMatch.forEach((hexRaw) => {\r\n      const rgbChannels = hexToRgb(hexRaw);\r\n      const hex = hexRaw.toLowerCase();\r\n\r\n      addParsedColor(hex, rgbChannels, parsedPalette);\r\n    });\r\n  }\r\n\r\n  const rgbPattern = /(rgba?\\(\\d{1,3},?\\s*\\d{1,3},?\\s*\\d{1,3}(,?\\s*\\d?\\.?\\d*)?\\))/gi;\r\n  const rgbMatch = rawPalette.match(rgbPattern);\r\n\r\n  if (rgbMatch) {\r\n    rgbMatch.forEach((rgbRaw) => {\r\n      const rgbChannels = parseChannels(rgbRaw);\r\n      const checkedRgbChannels = checkRgbChannels(rgbChannels);\r\n      const hex = rgbToHex(checkedRgbChannels);\r\n\r\n      addParsedColor(hex, checkedRgbChannels, parsedPalette);\r\n    });\r\n  }\r\n\r\n  const hslPattern = /(hsla?\\(\\d{1,3}(deg)?,?\\s*\\d{1,3}%,?\\s*\\d{1,3}%,?\\s*(,?\\s*\\d?\\.?\\d*)?\\))/gi;\r\n  const hslMatch = rawPalette.match(hslPattern);\r\n\r\n  if (hslMatch) {\r\n    hslMatch.forEach((hslRaw) => {\r\n      const hslChannels = parseChannels(hslRaw);\r\n      const checkedHslChannels = checkHslChannels(hslChannels);\r\n      const rgbChannels = hslToRgb(checkedHslChannels);\r\n      const hex = rgbToHex(rgbChannels);\r\n\r\n      addParsedColor(hex, rgbChannels, parsedPalette);\r\n    });\r\n  }\r\n\r\n  return parsedPalette;\r\n}\r\n\r\nfunction parseChannels(channelsRaw) {\r\n  const channelPattern = /(\\d{1,3})/gi;\r\n  const channelMatch = channelsRaw.match(channelPattern);\r\n\r\n  if (channelMatch) {\r\n    return [channelMatch[0], channelMatch[1], channelMatch[2]];\r\n  }\r\n}\r\n\r\nfunction checkRgbChannels(rgbChannels) {\r\n  if (rgbChannels.some((channel) => channel > 255)) {\r\n    const correctedRgbChannels = rgbChannels.map((channel) =>\r\n      channel > 255 ? 255 : channel\r\n    );\r\n    return correctedRgbChannels;\r\n  } else {\r\n    return rgbChannels;\r\n  }\r\n}\r\n\r\nfunction checkHslChannels(hslChannels) {\r\n  if (hslChannels[0] > 360 || hslChannels[1] > 100 || hslChannels[2] > 100) {\r\n    const correctedHslChannels = hslChannels.map((channel, index) => {\r\n      let max = index === 0 ? 360 : 100;\r\n      return channel > max ? max : channel;\r\n    });\r\n    return correctedHslChannels;\r\n  } else {\r\n    return hslChannels;\r\n  }\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n  const match = /([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})/i.exec(hex);\r\n\r\n  if (match) {\r\n    return [\r\n      parseInt(match[1], 16),\r\n      parseInt(match[2], 16),\r\n      parseInt(match[3], 16)\r\n    ];\r\n  }\r\n}\r\n\r\nfunction rgbToHex(rgbChannels) {\r\n  let hex = \"\";\r\n\r\n  rgbChannels.forEach((rgbChannel) => {\r\n    let hexChannel = Number(rgbChannel).toString(16);\r\n\r\n    if (hexChannel.length === 1) {\r\n      hexChannel = \"0\" + hexChannel;\r\n    }\r\n\r\n    hex += hexChannel;\r\n  });\r\n\r\n  return hex;\r\n}\r\n\r\nfunction hslToRgb(hslChannels) {\r\n  // Formula from: https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\r\n  const h = hslChannels[0];\r\n  const s = hslChannels[1] / 100;\r\n  const l = hslChannels[2] / 100;\r\n\r\n  const a = s * Math.min(l, 1 - l);\r\n\r\n  const f = (n, k = (n + h / 30) % 12) =>\r\n    Math.round(255 * (l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1))));\r\n\r\n  return [f(0), f(8), f(4)];\r\n}\r\n\r\nfunction addParsedColor(hex, rgbChannels, parsedPalette) {\r\n  const newColorValue = {\r\n    hex: hex,\r\n    rgb: rgbChannels\r\n  };\r\n\r\n  const isDuplicate = parsedPalette.some(\r\n    (color) => color.hex === newColorValue.hex\r\n  );\r\n\r\n  if (!isDuplicate) {\r\n    parsedPalette.push(newColorValue);\r\n  }\r\n}\r\n\r\n// The quadratic formula is used to solve for \"threshold luminance\" i.e. the luminance which has equal contrast with black or white.\r\nconst thresholdLuminance = (-0.1 + Math.sqrt(0.21)) / 2;\r\n\r\nexport function getPaletteData(parsedPalette) {\r\n  const paletteData = [];\r\n\r\n  parsedPalette.forEach((color) => {\r\n    const luminance = getLuminance(color.rgb);\r\n    const grayscaleEquivalent = getGrayscaleEquivalent(color.rgb);\r\n    const theme = luminance >= thresholdLuminance ? \"light\" : \"dark\";\r\n\r\n    const colorData = {\r\n      hex: color.hex,\r\n      grayscaleEquivalent: grayscaleEquivalent,\r\n      luminance: luminance,\r\n      theme: theme\r\n    };\r\n\r\n    paletteData.push(colorData);\r\n  });\r\n\r\n  return paletteData;\r\n}\r\n\r\nfunction getLuminance(rgb) {\r\n  const channelLuminance = [];\r\n\r\n  rgb.forEach((channel, index) => {\r\n    const sRgb = channel / 255;\r\n    if (sRgb <= 0.03928) {\r\n      channelLuminance[index] = sRgb / 12.92;\r\n    } else {\r\n      channelLuminance[index] = ((sRgb + 0.055) / 1.055) ** 2.4;\r\n    }\r\n  });\r\n\r\n  const relativeLuminance =\r\n    0.2126 * channelLuminance[0] +\r\n    0.7152 * channelLuminance[1] +\r\n    0.0722 * channelLuminance[2];\r\n\r\n  return relativeLuminance;\r\n}\r\n\r\nfunction getGrayscaleEquivalent(rgb) {\r\n  const rgbGrayEquivalent = 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];\r\n\r\n  let singleChannelHex = Math.round(rgbGrayEquivalent).toString(16);\r\n  if (singleChannelHex.length === 1) {\r\n    singleChannelHex = \"0\" + singleChannelHex;\r\n  }\r\n  return singleChannelHex.repeat(3);\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport PaletteInput from \"../../components/paletteInput/PaletteInput\";\r\n\r\nimport { FaTrash } from \"react-icons/fa\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  parseRawPalette,\r\n  getPaletteData\r\n} from \"./PaletteInputContainerHelpers\";\r\n\r\nfunction PaletteInputContainer({\r\n  showPaletteInput,\r\n  setPaletteData,\r\n  handleInputSubmit\r\n}) {\r\n  const [rawPalette, setRawPalette] = useState(\"\");\r\n  const [paletteLength, setPaletteLength] = useState(0);\r\n\r\n  const handleInputChange = (event) => {\r\n    const rawPaletteInput = event.target.value;\r\n\r\n    const parsedPalette = parseRawPalette(event.target.value);\r\n\r\n    if (parsedPalette) {\r\n      setPaletteData(getPaletteData(parsedPalette));\r\n      setPaletteLength(parsedPalette.length);\r\n    }\r\n\r\n    setRawPalette(rawPaletteInput);\r\n  };\r\n\r\n  const clearInputSetState = () => {\r\n    const inputTextArea = document.getElementById(\"palette-input\");\r\n\r\n    const nativeInputValueSetter = Object.getOwnPropertyDescriptor(\r\n      window.HTMLTextAreaElement.prototype,\r\n      \"value\"\r\n    ).set;\r\n    nativeInputValueSetter.call(inputTextArea, \"\");\r\n\r\n    inputTextArea.dispatchEvent(new Event(\"change\", { bubbles: true }));\r\n  };\r\n\r\n  const inputIsEmpty = rawPalette === \"\";\r\n\r\n  const clearInputProps = {\r\n    heading: \"Clear palette\",\r\n    name: \"clear-palette\",\r\n    icon: <FaTrash />,\r\n    disableOnClick: true,\r\n    state: inputIsEmpty,\r\n    setState: clearInputSetState\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showPaletteInput && (\r\n        <PaletteInput\r\n          rawPalette={rawPalette}\r\n          handleInputChange={handleInputChange}\r\n          handleInputSubmit={handleInputSubmit}\r\n          disableSubmit={paletteLength < 2}\r\n          clearInputProps={clearInputProps}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nPaletteInputContainer.propTypes = {\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  setPaletteData: PropTypes.func.isRequired,\r\n  handleInputSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PaletteInputContainer;\r\n","import React from \"react\";\r\n\r\nimport { IconContext } from \"react-icons\";\r\nimport { RiHeartAddLine } from \"react-icons/ri\";\r\n\r\nimport \"./ColorPair.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ColorPair({\r\n  pairColor,\r\n  pairGrayscaleEquivalent,\r\n  contrast,\r\n  hoverGrowClass,\r\n  textSize,\r\n  hidePairs,\r\n  grayscale\r\n}) {\r\n  return (\r\n    <article\r\n      className={`color-pair${hidePairs}${hoverGrowClass}`}\r\n      style={{ color: `#${grayscale ? pairGrayscaleEquivalent : pairColor}` }}\r\n      data-testid=\"color-pair\"\r\n    >\r\n      <p className=\"color-pair__contrast\">\r\n        {Math.round((contrast + Number.EPSILON) * 10) / 10} : 1\r\n      </p>\r\n      <h1 className=\"color-pair__heading\">{pairColor}</h1>\r\n      <IconContext.Provider value={{ className: \"color-pair__heart\" }}>\r\n        <RiHeartAddLine />\r\n      </IconContext.Provider>\r\n      <p className={`color-pair__text-size color-pair__text-size--${textSize}`}>\r\n        {textSize} font\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nColorPair.propTypes = {\r\n  pairColor: PropTypes.string.isRequired,\r\n  pairGrayscaleEquivalent: PropTypes.string.isRequired,\r\n  contrast: PropTypes.number.isRequired,\r\n  hoverGrowClass: PropTypes.string.isRequired,\r\n  textSize: PropTypes.string.isRequired,\r\n  hidePairs: PropTypes.string.isRequired,\r\n  grayscale: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default ColorPair;\r\n","import React from \"react\";\r\n\r\nimport ColorPair from \"../colorPair/ColorPair\";\r\n\r\nimport \"./ColorStripe.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ColorStripe({\r\n  stripeColor,\r\n  grayscaleEquivalent,\r\n  filteredColorPairs,\r\n  maxPairsCount,\r\n  placeholdersRequired,\r\n  hoverGrowClass,\r\n  hidePairs,\r\n  contrastStandard,\r\n  grayscale,\r\n  stripeTheme\r\n}) {\r\n  return (\r\n    <section\r\n      className=\"color-stripe\"\r\n      style={{\r\n        backgroundColor: `#${grayscale ? grayscaleEquivalent : stripeColor}`\r\n      }}\r\n      data-testid=\"color-stripe\"\r\n    >\r\n      <section\r\n        className=\"color-stripe__pairs-container\"\r\n        style={{ minHeight: `${maxPairsCount * 4 + 12}em` }}\r\n      >\r\n        {filteredColorPairs &&\r\n          filteredColorPairs.map((colorPair) => {\r\n            return (\r\n              <ColorPair\r\n                key={colorPair.hex}\r\n                pairColor={colorPair.hex}\r\n                pairGrayscaleEquivalent={colorPair.grayscaleEquivalent}\r\n                contrast={colorPair.contrast}\r\n                hoverGrowClass={hoverGrowClass}\r\n                textSize={colorPair[contrastStandard]}\r\n                hidePairs={hidePairs}\r\n                grayscale={grayscale}\r\n              />\r\n            );\r\n          })}\r\n        {placeholdersRequired > 0 && (\r\n          <div\r\n            className=\"color-stripe__placeholder\"\r\n            style={{\r\n              flex: `${placeholdersRequired} ${placeholdersRequired} ${placeholdersRequired}em`\r\n            }}\r\n          ></div>\r\n        )}\r\n      </section>\r\n      <h1\r\n        className={`color-stripe__heading color-stripe__heading--theme-${stripeTheme} color-stripe__heading--${stripeColor}`}\r\n      >\r\n        {stripeColor}\r\n        <style>\r\n          {`.color-stripe__heading--${stripeColor} {\r\n            background: linear-gradient(to top, #${stripeColor}, 60%, transparent 105%);\r\n          }`}\r\n        </style>\r\n      </h1>\r\n    </section>\r\n  );\r\n}\r\n\r\nColorStripe.propTypes = {\r\n  stripeColor: PropTypes.string.isRequired,\r\n  grayscaleEquivalent: PropTypes.string.isRequired,\r\n  filteredColorPairs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      hex: PropTypes.string.isRequired,\r\n      grayscaleEquivalent: PropTypes.string.isRequired,\r\n      contrast: PropTypes.number.isRequired,\r\n      aa: PropTypes.string.isRequired,\r\n      aaa: PropTypes.string\r\n    })\r\n  ),\r\n  placeholdersRequired: PropTypes.number,\r\n  hoverGrowClass: PropTypes.string.isRequired,\r\n  hidePairs: PropTypes.string.isRequired,\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  stripeTheme: PropTypes.oneOf([\"dark\", \"light\"]).isRequired\r\n};\r\n\r\nexport default ColorStripe;\r\n","import React from \"react\";\r\n\r\nimport ColorStripe from \"../../components/colorStripe/ColorStripe\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ColorStripeContainer({\r\n  color,\r\n  colorPairs,\r\n  maxPairsCount,\r\n  showPaletteInput,\r\n  contrastStandard,\r\n  grayscale,\r\n  theme\r\n}) {\r\n  let displayStripe;\r\n  if (theme === \"both\" || theme === color.theme) {\r\n    displayStripe = true;\r\n  } else {\r\n    displayStripe = false;\r\n  }\r\n\r\n  const hidePairs = showPaletteInput ? \" color-pair--hide\" : \"\";\r\n\r\n  const placeholdersRequired = {};\r\n  if (colorPairs) {\r\n    placeholdersRequired[\"aa\"] = maxPairsCount - colorPairs[\"aaPairsCount\"];\r\n    placeholdersRequired[\"aaa\"] = maxPairsCount - colorPairs[\"aaaPairsCount\"];\r\n  }\r\n\r\n  const hoverGrowClass =\r\n    maxPairsCount > 5 ? \" color-pair--enable-hover-grow\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      {displayStripe && (\r\n        <ColorStripe\r\n          stripeColor={color.hex}\r\n          grayscaleEquivalent={color.grayscaleEquivalent}\r\n          filteredColorPairs={colorPairs && colorPairs[contrastStandard]}\r\n          maxPairsCount={maxPairsCount}\r\n          placeholdersRequired={\r\n            colorPairs && placeholdersRequired[contrastStandard]\r\n          }\r\n          hoverGrowClass={hoverGrowClass}\r\n          hidePairs={hidePairs}\r\n          contrastStandard={contrastStandard}\r\n          grayscale={grayscale}\r\n          stripeTheme={color.theme}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nColorStripeContainer.propTypes = {\r\n  color: PropTypes.shape({\r\n    hex: PropTypes.string.isRequired,\r\n    grayscaleEquivalent: PropTypes.string.isRequired,\r\n    luminance: PropTypes.number.isRequired,\r\n    theme: PropTypes.oneOf([\"dark\", \"light\"]).isRequired\r\n  }).isRequired,\r\n  colorPairs: PropTypes.shape({\r\n    aa: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        hex: PropTypes.string.isRequired,\r\n        grayscaleEquivalent: PropTypes.string.isRequired,\r\n        contrast: PropTypes.number.isRequired,\r\n        aa: PropTypes.string.isRequired,\r\n        aaa: PropTypes.string\r\n      }).isRequired\r\n    ).isRequired,\r\n    aaPairsCount: PropTypes.number.isRequired,\r\n    aaa: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        hex: PropTypes.string.isRequired,\r\n        grayscaleEquivalent: PropTypes.string.isRequired,\r\n        contrast: PropTypes.number.isRequired,\r\n        aa: PropTypes.string.isRequired,\r\n        aaa: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    aaaPairsCount: PropTypes.number.isRequired\r\n  }),\r\n  maxPairsCount: PropTypes.number.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired\r\n};\r\n\r\nexport default ColorStripeContainer;\r\n","import React from \"react\";\r\n\r\nimport ColorStripeContainer from \"../../containers/colorStripeContainer/ColorStripeContainer\";\r\n\r\nimport \"./PaletteDisplay.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction PaletteDisplay({\r\n  paletteData,\r\n  allColorPairs,\r\n  maxPairsCount,\r\n  showPaletteInput,\r\n  contrastStandard,\r\n  grayscale,\r\n  theme\r\n}) {\r\n  return (\r\n    <section className=\"palette-display\">\r\n      {paletteData.map((color) => {\r\n        return (\r\n          <ColorStripeContainer\r\n            key={color.hex}\r\n            color={color}\r\n            colorPairs={allColorPairs[color.hex]}\r\n            maxPairsCount={maxPairsCount}\r\n            showPaletteInput={showPaletteInput}\r\n            contrastStandard={contrastStandard}\r\n            grayscale={grayscale}\r\n            theme={theme}\r\n          />\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n\r\nPaletteDisplay.propTypes = {\r\n  paletteData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      hex: PropTypes.string.isRequired,\r\n      grayscaleEquivalent: PropTypes.string.isRequired,\r\n      luminance: PropTypes.number.isRequired,\r\n      theme: PropTypes.oneOf([\"dark\", \"light\"]).isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  allColorPairs: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      aa: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          hex: PropTypes.string.isRequired,\r\n          grayscaleEquivalent: PropTypes.string.isRequired,\r\n          contrast: PropTypes.number.isRequired,\r\n          aa: PropTypes.string.isRequired,\r\n          aaa: PropTypes.string\r\n        }).isRequired\r\n      ),\r\n      aaPairsCount: PropTypes.number.isRequired,\r\n      aaa: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          hex: PropTypes.string.isRequired,\r\n          grayscaleEquivalent: PropTypes.string.isRequired,\r\n          contrast: PropTypes.number.isRequired,\r\n          aa: PropTypes.string.isRequired,\r\n          aaa: PropTypes.string.isRequired\r\n        }).isRequired\r\n      ),\r\n      aaaPairsCount: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  maxPairsCount: PropTypes.number.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired\r\n};\r\n\r\nexport default PaletteDisplay;\r\n","export function noThemeInPalette(paletteData, theme) {\r\n  return !paletteData.some((color) => Object.values(color).includes(theme));\r\n}\r\n\r\nexport function getAllColorPairData(paletteData) {\r\n  const rawColorPairs = getRawColorPairs(paletteData);\r\n\r\n  const allFilteredColorPairs = {};\r\n  let maxPairsCount = 0;\r\n\r\n  for (const [color, pairingData] of Object.entries(rawColorPairs)) {\r\n    const [aa, aaa] = getFilteredColorPairs(pairingData);\r\n\r\n    allFilteredColorPairs[color] = {};\r\n\r\n    allFilteredColorPairs[color][\"aa\"] = aa;\r\n    allFilteredColorPairs[color][\"aaa\"] = aaa;\r\n\r\n    const aaPairsCount = aa.length;\r\n    allFilteredColorPairs[color][\"aaPairsCount\"] = aaPairsCount;\r\n    allFilteredColorPairs[color][\"aaaPairsCount\"] = aaa.length;\r\n\r\n    if (aaPairsCount > maxPairsCount) {\r\n      maxPairsCount = aaPairsCount;\r\n    }\r\n  }\r\n\r\n  return [allFilteredColorPairs, maxPairsCount];\r\n}\r\n\r\nfunction getRawColorPairs(paletteData) {\r\n  const rawColorPairs = {};\r\n\r\n  // These loops just set up empty nested objects to store color-pair data\r\n  paletteData.forEach((colorOuter) => {\r\n    rawColorPairs[colorOuter.hex] = {};\r\n\r\n    paletteData.forEach((colorInner) => {\r\n      if (colorInner.hex !== colorOuter.hex) {\r\n        rawColorPairs[colorOuter.hex][colorInner.hex] = {};\r\n      }\r\n    });\r\n  });\r\n\r\n  const iStop = paletteData.length - 1;\r\n  const jStop = paletteData.length;\r\n  for (let i = 0; i < iStop; i++) {\r\n    for (let j = i + 1; j < jStop; j++) {\r\n      const color1 = paletteData[i];\r\n      const color2 = paletteData[j];\r\n\r\n      const hex1 = color1.hex;\r\n      const hex2 = color2.hex;\r\n\r\n      setColorPairData(\r\n        rawColorPairs,\r\n        hex1,\r\n        hex2,\r\n        \"grayscaleEquivalent\",\r\n        color2.grayscaleEquivalent,\r\n        color1.grayscaleEquivalent\r\n      );\r\n\r\n      let contrast = getContrast(color1.luminance, color2.luminance);\r\n      contrast = Math.round((contrast + Number.EPSILON) * 10) / 10;\r\n      setColorPairData(rawColorPairs, hex1, hex2, \"contrast\", contrast);\r\n\r\n      if (contrast >= 7) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Any\");\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aaa\", \"Any\");\r\n      } else if (contrast >= 4.5) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Any\");\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aaa\", \"Large\");\r\n      } else if (contrast >= 3) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Large\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return rawColorPairs;\r\n}\r\n\r\nfunction getContrast(luminance1, luminance2) {\r\n  let contrast;\r\n\r\n  if (luminance1 > luminance2) {\r\n    contrast = (luminance1 + 0.05) / (luminance2 + 0.05);\r\n  } else {\r\n    contrast = (luminance2 + 0.05) / (luminance1 + 0.05);\r\n  }\r\n\r\n  return contrast;\r\n}\r\n\r\nfunction setColorPairData(rawColorPairs, hex1, hex2, key, value1, value2) {\r\n  rawColorPairs[hex1][hex2][key] = value1;\r\n  rawColorPairs[hex2][hex1][key] = value2 || value1;\r\n}\r\n\r\nfunction getFilteredColorPairs(pairingData) {\r\n  const sortedColorPairs = getSortedColorPairs(pairingData);\r\n\r\n  const aa = sortedColorPairs.filter((pair) => \"aa\" in pair);\r\n  const aaa = aa.filter((pair) => \"aaa\" in pair);\r\n\r\n  return [aa, aaa];\r\n}\r\n\r\nfunction getSortedColorPairs(pairingData) {\r\n  const sortedColorPairs = [];\r\n\r\n  Object.entries(pairingData).forEach((pairing) => {\r\n    sortedColorPairs.push(Object.assign({}, { hex: pairing[0] }, pairing[1]));\r\n  });\r\n\r\n  sortedColorPairs.sort((a, b) => {\r\n    return b.contrast - a.contrast;\r\n  });\r\n\r\n  return sortedColorPairs;\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport PaletteInputContainer from \"../paletteInputContainer/PaletteInputContainer\";\r\nimport PaletteDisplay from \"../../components/paletteDisplay/PaletteDisplay\";\r\n\r\nimport {\r\n  noThemeInPalette,\r\n  getAllColorPairData\r\n} from \"./PaletteAreaContainerHelpers\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction PaletteAreaContainer({\r\n  contrastStandard,\r\n  grayscale,\r\n  theme,\r\n  setNoDarkColors,\r\n  setNoLightColors,\r\n  showPaletteInput,\r\n  setShowPaletteInput\r\n}) {\r\n  const [paletteData, setPaletteData] = useState([]);\r\n  const [allColorPairs, setAllColorPairs] = useState({});\r\n  const [maxPairsCount, setMaxPairsCount] = useState(0);\r\n\r\n  const handleInputSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const [colorPairs, maxPairs] = getAllColorPairData(paletteData);\r\n\r\n    setAllColorPairs(colorPairs);\r\n    setMaxPairsCount(maxPairs);\r\n\r\n    setNoDarkColors(noThemeInPalette(paletteData, \"dark\"));\r\n    setNoLightColors(noThemeInPalette(paletteData, \"light\"));\r\n\r\n    setShowPaletteInput(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PaletteInputContainer\r\n        showPaletteInput={showPaletteInput}\r\n        setPaletteData={setPaletteData}\r\n        handleInputSubmit={handleInputSubmit}\r\n      />\r\n      <PaletteDisplay\r\n        paletteData={paletteData}\r\n        allColorPairs={allColorPairs}\r\n        maxPairsCount={maxPairsCount}\r\n        showPaletteInput={showPaletteInput}\r\n        contrastStandard={contrastStandard}\r\n        grayscale={grayscale}\r\n        theme={theme}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nPaletteAreaContainer.propTypes = {\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired,\r\n  setNoDarkColors: PropTypes.func.isRequired,\r\n  setNoLightColors: PropTypes.func.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  setShowPaletteInput: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PaletteAreaContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport SettingsBarContainer from \"./containers/settingsBarContainer/SettingsBarContainer\";\r\nimport PaletteAreaContainer from \"./containers/paletteAreaContainer/PaletteAreaContainer\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [contrastStandard, setContrastStandard] = useState(\"aa\");\r\n  const [grayscale, setGrayscale] = useState(false);\r\n  const [previousGrayscale, setPreviousGrayscale] = useState(grayscale);\r\n  const [theme, setTheme] = useState(\"both\");\r\n  const [previousTheme, setPreviousTheme] = useState(theme);\r\n  const [noDarkColors, setNoDarkColors] = useState(false);\r\n  const [noLightColors, setNoLightColors] = useState(false);\r\n  const [showPaletteInput, setShowPaletteInput] = useState(true);\r\n  // const [showPaletteExport, setShowPaletteExport] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (showPaletteInput) {\r\n      setGrayscale(false);\r\n      setTheme(\"both\");\r\n\r\n      if (noDarkColors || noLightColors) {\r\n        setPreviousTheme(\"both\");\r\n      }\r\n    } else {\r\n      setGrayscale(previousGrayscale);\r\n\r\n      if (noDarkColors || noLightColors) {\r\n        setTheme(noDarkColors ? \"light\" : \"dark\");\r\n      } else {\r\n        setTheme(previousTheme);\r\n      }\r\n    }\r\n  }, [\r\n    showPaletteInput,\r\n    noDarkColors,\r\n    noLightColors,\r\n    previousGrayscale,\r\n    previousTheme\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <nav className=\"app__settings-bar\">\r\n        <SettingsBarContainer\r\n          contrastStandard={contrastStandard}\r\n          setContrastStandard={setContrastStandard}\r\n          grayscale={grayscale}\r\n          setGrayscale={setGrayscale}\r\n          setPreviousGrayscale={setPreviousGrayscale}\r\n          theme={theme}\r\n          setTheme={setTheme}\r\n          setPreviousTheme={setPreviousTheme}\r\n          noDarkColors={noDarkColors}\r\n          noLightColors={noLightColors}\r\n          showPaletteInput={showPaletteInput}\r\n          setShowPaletteInput={setShowPaletteInput}\r\n          // showPaletteExport={showPaletteExport}\r\n          // setShowPaletteExport={setShowPaletteExport}\r\n        />\r\n      </nav>\r\n      <main className=\"app__main\">\r\n        <PaletteAreaContainer\r\n          contrastStandard={contrastStandard}\r\n          grayscale={grayscale}\r\n          theme={theme}\r\n          setNoDarkColors={setNoDarkColors}\r\n          setNoLightColors={setNoLightColors}\r\n          showPaletteInput={showPaletteInput}\r\n          setShowPaletteInput={setShowPaletteInput}\r\n          // showPaletteExport={showPaletteExport}\r\n          // setShowPaletteExport={setShowPaletteExport}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}