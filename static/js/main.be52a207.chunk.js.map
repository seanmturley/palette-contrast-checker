{"version":3,"sources":["components/radioButtonGroup/RadioButtonGroup.js","components/toggleSwitch/ToggleSwitch.js","components/iconButton/IconButton.js","containers/settingsBarContainer.js/SettingsBarContainer.js","components/paletteInput/PaletteInput.js","containers/paletteInputContainer/PaletteInputContainerHelpers.js","containers/paletteInputContainer/PaletteInputContainer.js","components/colorPair/ColorPair.js","components/colorStripe/ColorStripe.js","containers/colorStripeContainer/ColorStripeContainer.js","components/paletteDisplay/PaletteDisplay.js","containers/paletteAreaContainer/PaletteAreaContainerHelpers.js","containers/paletteAreaContainer/PaletteAreaContainer.js","App.js","reportWebVitals.js","index.js"],"names":["RadioButtonGroup","heading","name","options","selected","setState","handleChange","event","target","value","className","role","aria-labelledby","id","map","option","isSelected","htmlFor","type","onChange","checked","ToggleSwitch","optionLabels","showLabels","state","false","true","IconButton","icon","disableOnClick","clickability","onClick","onMouseDown","preventDefault","disabled","Provider","SettingsBar","contrastStandard","setContrastStandard","grayscale","setGrayscale","theme","setTheme","showPaletteInput","setShowPaletteInput","contrastStandardProps","themeProps","grayscaleProps","editPaletteProps","PaletteInput","rawPalette","handleInputChange","handleInputSubmit","aria-label","onSubmit","aria-multiline","placeholder","rows","cols","spellCheck","parseRawPalette","hexMatch","match","colorValues","forEach","hex","newColorValue","rgb","exec","parseInt","hexToRgb","push","thresholdLuminance","Math","sqrt","getPaletteData","parsedPalette","paletteData","color","luminance","channelLuminance","channel","index","sRgb","getLuminance","grayscaleEquivalent","rgbGrayEquivalent","singleChannelHex","round","toString","length","repeat","getGrayscaleEquivalent","colorData","PaletteInputContainer","setPaletteData","useState","setRawPalette","rawPaletteInput","ColorPair","pairColor","pairGrayscaleEquivalent","contrast","hoverGrowClass","textSize","hidePairs","style","data-testid","Number","EPSILON","ColorStripe","stripeColor","filteredColorPairs","placeholdersRequired","stripeTheme","backgroundColor","colorPair","flex","ColorStripeContainer","displayStripe","colorPairs","maxPairsCount","PaletteDisplay","allColorPairs","getAllColorPairData","rawColorPairs","colorOuter","colorInner","iStop","jStop","i","j","color1","color2","hex1","hex2","setColorPairData","getContrast","getRawColorPairs","allFilteredColorPairs","Object","entries","getFilteredColorPairs","aa","aaa","aaPairsCount","luminance1","luminance2","key","value1","value2","pairingData","sortedColorPairs","pairing","assign","sort","a","b","getSortedColorPairs","filter","pair","PaletteAreaContainer","setAllColorPairs","setMaxPairsCount","maxPairs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be52a207.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./RadioButtonGroup.css\";\r\n\r\nfunction RadioButtonGroup({ heading, name, options, selected, setState }) {\r\n  const handleChange = (event) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className=\"radio-button-group\">\r\n      <section\r\n        className=\"radio-button-group__container\"\r\n        role=\"radiogroup\"\r\n        aria-labelledby={name}\r\n      >\r\n        <h1 className=\"radio-button-group__heading\" id={name}>\r\n          {heading}\r\n        </h1>\r\n        {options.map((option) => {\r\n          const isSelected =\r\n            option === selected ? \" radio-button-group__label--selected\" : \"\";\r\n          return (\r\n            <label\r\n              key={option}\r\n              htmlFor={option}\r\n              className={`radio-button-group__label${isSelected}`}\r\n            >\r\n              <input\r\n                className=\"radio-button-group__input\"\r\n                type=\"radio\"\r\n                name={name}\r\n                id={option}\r\n                value={option}\r\n                onChange={handleChange}\r\n                checked={option === selected}\r\n              />\r\n              <span className=\"radio-button-group__label-text\">{option}</span>\r\n            </label>\r\n          );\r\n        })}\r\n      </section>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default RadioButtonGroup;\r\n","import React from \"react\";\r\n\r\nimport \"./ToggleSwitch.css\";\r\n\r\nfunction ToggleSwitch({\r\n  heading,\r\n  name,\r\n  optionLabels,\r\n  showLabels,\r\n  state,\r\n  setState\r\n}) {\r\n  const handleChange = (event) => {\r\n    setState(event.target.value === optionLabels.true);\r\n  };\r\n\r\n  // State now being true/false instead of a string is causing issues with component logic below - rewrite it all. Take into account CSS too!\r\n\r\n  return (\r\n    <form className={`toggle-switch toggle-switch--${state}`}>\r\n      <section className=\"toggle-switch__container\">\r\n        <h1 className=\"toggle-switch__heading\">{heading}</h1>\r\n        <label htmlFor={name} className=\"toggle-switch__label\">\r\n          <span className=\"toggle-switch__label-text\">{heading}</span>\r\n          <input\r\n            className=\"toggle-switch__input\"\r\n            type=\"checkbox\"\r\n            name={name}\r\n            id={name}\r\n            value={state ? optionLabels.false : optionLabels.true}\r\n            onChange={handleChange}\r\n            checked={state}\r\n          />\r\n          <div className=\"toggle-switch__sliding-container\">\r\n            <div className=\"toggle-switch__text-container\">\r\n              <span className=\"toggle-switch__text-true\">\r\n                {showLabels && optionLabels.true}\r\n              </span>\r\n            </div>\r\n            <div className=\"toggle-switch__circle\"></div>\r\n            <div className=\"toggle-switch__text-container\">\r\n              <span className=\"toggle-switch__text-false\">\r\n                {showLabels && optionLabels.false}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </label>\r\n      </section>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ToggleSwitch;\r\n","import React from \"react\";\r\n\r\nimport { IconContext } from \"react-icons\";\r\n\r\nimport \"./IconButton.css\";\r\n\r\nfunction IconButton({ heading, name, icon, disableOnClick, state, setState }) {\r\n  const handleClick = () => {\r\n    setState(!state);\r\n  };\r\n\r\n  const preventFocusOnClick = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const clickability = disableOnClick && state ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <button\r\n      className={`icon-button icon-button--${clickability}`}\r\n      type=\"button\"\r\n      name={name}\r\n      onClick={handleClick}\r\n      onMouseDown={preventFocusOnClick}\r\n      disabled={disableOnClick && state}\r\n    >\r\n      <h1 className=\"icon-button__heading\">{heading}</h1>\r\n      <IconContext.Provider value={{ className: \"icon-button__icon\" }}>\r\n        {icon}\r\n      </IconContext.Provider>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default IconButton;\r\n","import React from \"react\";\r\n\r\nimport RadioButtonGroup from \"../../components/radioButtonGroup/RadioButtonGroup\";\r\nimport ToggleSwitch from \"../../components/toggleSwitch/ToggleSwitch\";\r\nimport IconButton from \"../../components/iconButton/IconButton\";\r\n\r\nimport { FaPalette } from \"react-icons/fa\";\r\n\r\nfunction SettingsBar({\r\n  contrastStandard,\r\n  setContrastStandard,\r\n  grayscale,\r\n  setGrayscale,\r\n  theme,\r\n  setTheme,\r\n  showPaletteInput,\r\n  setShowPaletteInput\r\n}) {\r\n  const contrastStandardProps = {\r\n    heading: \"WCAG \\n standard\",\r\n    name: \"contrast-standard\",\r\n    options: [\"aa\", \"aaa\"],\r\n    selected: contrastStandard,\r\n    setState: setContrastStandard\r\n  };\r\n\r\n  const themeProps = {\r\n    heading: \"Theme\",\r\n    name: \"theme\",\r\n    options: [\"dark\", \"both\", \"light\"],\r\n    selected: theme,\r\n    setState: setTheme\r\n  };\r\n\r\n  const grayscaleProps = {\r\n    heading: \"Grayscale \\n mode\",\r\n    name: \"grayscale-mode\",\r\n    optionLabels: { true: \"on\", false: \"off\" },\r\n    showLabels: true,\r\n    state: grayscale,\r\n    setState: setGrayscale\r\n  };\r\n\r\n  const editPaletteProps = {\r\n    heading: \"Edit \\n palette\",\r\n    name: \"edit-palette\",\r\n    icon: <FaPalette />,\r\n    disableOnClick: true,\r\n    state: showPaletteInput,\r\n    setState: setShowPaletteInput\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <RadioButtonGroup {...contrastStandardProps} />\r\n      <RadioButtonGroup {...themeProps} />\r\n      <ToggleSwitch {...grayscaleProps} />\r\n      <IconButton {...editPaletteProps} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingsBar;\r\n","import React from \"react\";\r\n\r\nimport \"./PaletteInput.css\";\r\n\r\nfunction PaletteInput({ rawPalette, handleInputChange, handleInputSubmit }) {\r\n  return (\r\n    <section className=\"palette-input\">\r\n      <form aria-label=\"form\" onSubmit={handleInputSubmit}>\r\n        <div className=\"palette-input__controls\">\r\n          <label className=\"palette-input__heading\" htmlFor=\"palette-input\">\r\n            Add palette\r\n          </label>\r\n          <input\r\n            className=\"palette-input__submit-button\"\r\n            type=\"submit\"\r\n            value=\"+\"\r\n          />\r\n        </div>\r\n        <textarea\r\n          className=\"palette-input__text-area\"\r\n          type=\"textarea\"\r\n          name=\"palette-input\"\r\n          id=\"palette-input\"\r\n          aria-multiline=\"true\"\r\n          placeholder=\"Enter a color palette\"\r\n          rows={12}\r\n          cols={36}\r\n          value={rawPalette}\r\n          onChange={handleInputChange}\r\n          spellCheck=\"false\"\r\n        />\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default PaletteInput;\r\n","export function parseRawPalette(rawPalette) {\r\n  // Parses palette input for hex values (extend later for other color formats)\r\n  // Returns array of objects containing the hex and rgb values for each match\r\n\r\n  const hexPattern = /([a-f\\d]{6})/gi;\r\n  const hexMatch = rawPalette.match(hexPattern);\r\n\r\n  const colorValues = [];\r\n\r\n  if (hexMatch) {\r\n    hexMatch.forEach((hex) => {\r\n      const rgb = hexToRgb(hex);\r\n      const newColorValue = {\r\n        hex: hex,\r\n        rgb: rgb\r\n      };\r\n      colorValues.push(newColorValue);\r\n    });\r\n    return colorValues;\r\n  }\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n  const match = /([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})/i.exec(hex);\r\n\r\n  if (match) {\r\n    return [\r\n      parseInt(match[1], 16),\r\n      parseInt(match[2], 16),\r\n      parseInt(match[3], 16)\r\n    ];\r\n  }\r\n}\r\n\r\n// The quadratic formula is used to solve for \"threshold luminance\" i.e. the luminance which has equal contrast with black or white.\r\nconst thresholdLuminance = (-0.1 + Math.sqrt(0.21)) / 2;\r\n\r\nexport function getPaletteData(parsedPalette) {\r\n  const paletteData = [];\r\n\r\n  parsedPalette.forEach((color) => {\r\n    const luminance = getLuminance(color.rgb);\r\n    const grayscaleEquivalent = getGrayscaleEquivalent(color.rgb);\r\n    const theme = luminance >= thresholdLuminance ? \"light\" : \"dark\";\r\n\r\n    const colorData = {\r\n      hex: color.hex,\r\n      grayscaleEquivalent: grayscaleEquivalent,\r\n      luminance: luminance,\r\n      theme: theme\r\n    };\r\n\r\n    paletteData.push(colorData);\r\n  });\r\n\r\n  return paletteData;\r\n}\r\n\r\nfunction getLuminance(rgb) {\r\n  const channelLuminance = [];\r\n\r\n  rgb.forEach((channel, index) => {\r\n    const sRgb = channel / 255;\r\n    if (sRgb <= 0.03928) {\r\n      channelLuminance[index] = sRgb / 12.92;\r\n    } else {\r\n      channelLuminance[index] = ((sRgb + 0.055) / 1.055) ** 2.4;\r\n    }\r\n  });\r\n\r\n  const relativeLuminance =\r\n    0.2126 * channelLuminance[0] +\r\n    0.7152 * channelLuminance[1] +\r\n    0.0722 * channelLuminance[2];\r\n\r\n  return relativeLuminance;\r\n}\r\n\r\nfunction getGrayscaleEquivalent(rgb) {\r\n  const rgbGrayEquivalent = 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];\r\n\r\n  let singleChannelHex = Math.round(rgbGrayEquivalent).toString(16);\r\n  if (singleChannelHex.length === 1) {\r\n    singleChannelHex = \"0\" + singleChannelHex;\r\n  }\r\n  return singleChannelHex.repeat(3);\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport PaletteInput from \"../../components/paletteInput/PaletteInput\";\r\n\r\nimport {\r\n  parseRawPalette,\r\n  getPaletteData\r\n} from \"./PaletteInputContainerHelpers\";\r\n\r\nfunction PaletteInputContainer({\r\n  showPaletteInput,\r\n  setPaletteData,\r\n  handleInputSubmit\r\n}) {\r\n  const [rawPalette, setRawPalette] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    const rawPaletteInput = event.target.value;\r\n\r\n    const parsedPalette = parseRawPalette(event.target.value);\r\n\r\n    if (parsedPalette) {\r\n      setPaletteData(getPaletteData(parsedPalette));\r\n    }\r\n\r\n    setRawPalette(rawPaletteInput);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showPaletteInput && (\r\n        <PaletteInput\r\n          rawPalette={rawPalette}\r\n          handleInputChange={handleInputChange}\r\n          handleInputSubmit={handleInputSubmit}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PaletteInputContainer;\r\n","import React from \"react\";\r\n\r\nimport { IconContext } from \"react-icons\";\r\nimport { RiHeartAddLine } from \"react-icons/ri\";\r\n\r\nimport \"./ColorPair.css\";\r\n\r\nfunction ColorPair({\r\n  pairColor,\r\n  pairGrayscaleEquivalent,\r\n  contrast,\r\n  hoverGrowClass,\r\n  textSize,\r\n  hidePairs,\r\n  grayscale\r\n}) {\r\n  return (\r\n    <article\r\n      className={`color-pair${hidePairs}${hoverGrowClass}`}\r\n      style={{ color: `#${grayscale ? pairGrayscaleEquivalent : pairColor}` }}\r\n      data-testid=\"color-pair\"\r\n    >\r\n      <p className=\"color-pair__contrast\">\r\n        {Math.round((contrast + Number.EPSILON) * 10) / 10} : 1\r\n      </p>\r\n      <div>\r\n        <h1 className=\"color-pair__heading\">{pairColor}</h1>\r\n        <IconContext.Provider value={{ className: \"color-pair__heart\" }}>\r\n          <RiHeartAddLine />\r\n        </IconContext.Provider>\r\n      </div>\r\n      <p className={`color-pair__text-size color-pair__text-size--${textSize}`}>\r\n        {textSize} font\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default ColorPair;\r\n","import React from \"react\";\r\n\r\nimport ColorPair from \"../colorPair/ColorPair\";\r\n\r\nimport \"./ColorStripe.css\";\r\n\r\nfunction ColorStripe({\r\n  stripeColor,\r\n  grayscaleEquivalent,\r\n  filteredColorPairs,\r\n  placeholdersRequired,\r\n  hoverGrowClass,\r\n  hidePairs,\r\n  contrastStandard,\r\n  grayscale,\r\n  stripeTheme\r\n}) {\r\n  return (\r\n    <section\r\n      className=\"color-stripe\"\r\n      style={{\r\n        backgroundColor: `#${grayscale ? grayscaleEquivalent : stripeColor}`\r\n      }}\r\n      data-testid=\"color-stripe\"\r\n    >\r\n      <section className=\"color-stripe__pairs-container\">\r\n        {filteredColorPairs &&\r\n          filteredColorPairs.map((colorPair) => {\r\n            return (\r\n              <ColorPair\r\n                key={colorPair.hex}\r\n                pairColor={colorPair.hex}\r\n                pairGrayscaleEquivalent={colorPair.grayscaleEquivalent}\r\n                contrast={colorPair.contrast}\r\n                hoverGrowClass={hoverGrowClass}\r\n                textSize={colorPair[contrastStandard]}\r\n                hidePairs={hidePairs}\r\n                grayscale={grayscale}\r\n              />\r\n            );\r\n          })}\r\n        {placeholdersRequired > 0 && (\r\n          <div\r\n            className=\"color-stripe__placeholder\"\r\n            style={{\r\n              flex: `${placeholdersRequired} ${placeholdersRequired} ${placeholdersRequired}em`\r\n            }}\r\n          ></div>\r\n        )}\r\n      </section>\r\n      <h1\r\n        className={`color-stripe__heading color-stripe__heading--theme-${stripeTheme}`}\r\n      >\r\n        {stripeColor}\r\n      </h1>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ColorStripe;\r\n","import React from \"react\";\r\n\r\nimport ColorStripe from \"../../components/colorStripe/ColorStripe\";\r\n\r\nfunction ColorStripeContainer({\r\n  color,\r\n  colorPairs,\r\n  maxPairsCount,\r\n  showPaletteInput,\r\n  contrastStandard,\r\n  grayscale,\r\n  theme\r\n}) {\r\n  let displayStripe;\r\n  if (theme === \"both\" || theme === color.theme) {\r\n    displayStripe = true;\r\n  } else {\r\n    displayStripe = false;\r\n  }\r\n\r\n  const hidePairs = showPaletteInput ? \" color-pair--hide\" : \"\";\r\n\r\n  const placeholdersRequired = {};\r\n  if (colorPairs) {\r\n    placeholdersRequired[\"aa\"] = maxPairsCount - colorPairs[\"aaPairsCount\"];\r\n    placeholdersRequired[\"aaa\"] = maxPairsCount - colorPairs[\"aaaPairsCount\"];\r\n  }\r\n\r\n  const hoverGrowClass =\r\n    maxPairsCount > 5 ? \" color-pair--enable-hover-grow\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      {displayStripe && (\r\n        <ColorStripe\r\n          stripeColor={color.hex}\r\n          grayscaleEquivalent={color.grayscaleEquivalent}\r\n          filteredColorPairs={colorPairs && colorPairs[contrastStandard]}\r\n          placeholdersRequired={\r\n            colorPairs && placeholdersRequired[contrastStandard]\r\n          }\r\n          hoverGrowClass={hoverGrowClass}\r\n          hidePairs={hidePairs}\r\n          contrastStandard={contrastStandard}\r\n          grayscale={grayscale}\r\n          stripeTheme={color.theme}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ColorStripeContainer;\r\n","import React from \"react\";\r\n\r\nimport ColorStripeContainer from \"../../containers/colorStripeContainer/ColorStripeContainer\";\r\n\r\nimport \"./PaletteDisplay.css\";\r\n\r\nfunction PaletteDisplay({\r\n  paletteData,\r\n  allColorPairs,\r\n  maxPairsCount,\r\n  showPaletteInput,\r\n  contrastStandard,\r\n  grayscale,\r\n  theme\r\n}) {\r\n  return (\r\n    <section className=\"palette-display\">\r\n      {paletteData.map((color) => {\r\n        return (\r\n          <ColorStripeContainer\r\n            key={color.hex}\r\n            color={color}\r\n            colorPairs={allColorPairs[color.hex]}\r\n            maxPairsCount={maxPairsCount}\r\n            showPaletteInput={showPaletteInput}\r\n            contrastStandard={contrastStandard}\r\n            grayscale={grayscale}\r\n            theme={theme}\r\n          />\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default PaletteDisplay;\r\n","export function getAllColorPairData(paletteData) {\r\n  const rawColorPairs = getRawColorPairs(paletteData);\r\n\r\n  const allFilteredColorPairs = {};\r\n  let maxPairsCount = 0;\r\n\r\n  for (const [color, pairingData] of Object.entries(rawColorPairs)) {\r\n    const [aa, aaa] = getFilteredColorPairs(pairingData);\r\n\r\n    allFilteredColorPairs[color] = {};\r\n\r\n    allFilteredColorPairs[color][\"aa\"] = aa;\r\n    allFilteredColorPairs[color][\"aaa\"] = aaa;\r\n\r\n    const aaPairsCount = aa.length;\r\n    allFilteredColorPairs[color][\"aaPairsCount\"] = aaPairsCount;\r\n    allFilteredColorPairs[color][\"aaaPairsCount\"] = aaa.length;\r\n\r\n    if (aaPairsCount > maxPairsCount) {\r\n      maxPairsCount = aaPairsCount;\r\n    }\r\n  }\r\n\r\n  return [allFilteredColorPairs, maxPairsCount];\r\n}\r\n\r\nfunction getRawColorPairs(paletteData) {\r\n  const rawColorPairs = {};\r\n\r\n  // These loops just set up empty nested objects to store color-pair data\r\n  paletteData.forEach((colorOuter) => {\r\n    rawColorPairs[colorOuter.hex] = {};\r\n\r\n    paletteData.forEach((colorInner) => {\r\n      if (colorInner.hex !== colorOuter.hex) {\r\n        rawColorPairs[colorOuter.hex][colorInner.hex] = {};\r\n      }\r\n    });\r\n  });\r\n\r\n  const iStop = paletteData.length - 1;\r\n  const jStop = paletteData.length;\r\n  for (let i = 0; i < iStop; i++) {\r\n    for (let j = i + 1; j < jStop; j++) {\r\n      const color1 = paletteData[i];\r\n      const color2 = paletteData[j];\r\n\r\n      const hex1 = color1.hex;\r\n      const hex2 = color2.hex;\r\n\r\n      setColorPairData(\r\n        rawColorPairs,\r\n        hex1,\r\n        hex2,\r\n        \"grayscaleEquivalent\",\r\n        color2.grayscaleEquivalent,\r\n        color1.grayscaleEquivalent\r\n      );\r\n\r\n      let contrast = getContrast(color1.luminance, color2.luminance);\r\n      contrast = Math.round((contrast + Number.EPSILON) * 10) / 10;\r\n      setColorPairData(rawColorPairs, hex1, hex2, \"contrast\", contrast);\r\n\r\n      if (contrast >= 7) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Any\");\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aaa\", \"Any\");\r\n      } else if (contrast >= 4.5) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Any\");\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aaa\", \"Large\");\r\n      } else if (contrast >= 3) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Large\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return rawColorPairs;\r\n}\r\n\r\nfunction getContrast(luminance1, luminance2) {\r\n  let contrast;\r\n\r\n  if (luminance1 > luminance2) {\r\n    contrast = (luminance1 + 0.05) / (luminance2 + 0.05);\r\n  } else {\r\n    contrast = (luminance2 + 0.05) / (luminance1 + 0.05);\r\n  }\r\n\r\n  return contrast;\r\n}\r\n\r\nfunction setColorPairData(rawColorPairs, hex1, hex2, key, value1, value2) {\r\n  rawColorPairs[hex1][hex2][key] = value1;\r\n  rawColorPairs[hex2][hex1][key] = value2 || value1;\r\n}\r\n\r\nfunction getFilteredColorPairs(pairingData) {\r\n  const sortedColorPairs = getSortedColorPairs(pairingData);\r\n\r\n  const aa = sortedColorPairs.filter((pair) => \"aa\" in pair);\r\n  const aaa = aa.filter((pair) => \"aaa\" in pair);\r\n\r\n  return [aa, aaa];\r\n}\r\n\r\nfunction getSortedColorPairs(pairingData) {\r\n  const sortedColorPairs = [];\r\n\r\n  Object.entries(pairingData).forEach((pairing) => {\r\n    sortedColorPairs.push(Object.assign({}, { hex: pairing[0] }, pairing[1]));\r\n  });\r\n\r\n  sortedColorPairs.sort((a, b) => {\r\n    return b.contrast - a.contrast;\r\n  });\r\n\r\n  return sortedColorPairs;\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport PaletteInputContainer from \"../paletteInputContainer/PaletteInputContainer\";\r\nimport PaletteDisplay from \"../../components/paletteDisplay/PaletteDisplay\";\r\n\r\nimport { getAllColorPairData } from \"./PaletteAreaContainerHelpers\";\r\n\r\nfunction PaletteAreaContainer({\r\n  contrastStandard,\r\n  grayscale,\r\n  theme,\r\n  showPaletteInput,\r\n  setShowPaletteInput\r\n}) {\r\n  // Will accept settings as props\r\n\r\n  const [paletteData, setPaletteData] = useState([]);\r\n  const [allColorPairs, setAllColorPairs] = useState({});\r\n  const [maxPairsCount, setMaxPairsCount] = useState(0);\r\n\r\n  const handleInputSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const [colorPairs, maxPairs] = getAllColorPairData(paletteData);\r\n\r\n    setAllColorPairs(colorPairs);\r\n    setMaxPairsCount(maxPairs);\r\n\r\n    setShowPaletteInput(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PaletteInputContainer\r\n        showPaletteInput={showPaletteInput}\r\n        setPaletteData={setPaletteData}\r\n        handleInputSubmit={handleInputSubmit}\r\n      />\r\n      <PaletteDisplay\r\n        paletteData={paletteData}\r\n        allColorPairs={allColorPairs}\r\n        maxPairsCount={maxPairsCount}\r\n        showPaletteInput={showPaletteInput}\r\n        contrastStandard={contrastStandard}\r\n        grayscale={grayscale}\r\n        theme={theme}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PaletteAreaContainer;\r\n","import React, { useState } from \"react\";\r\n\r\nimport SettingsBar from \"./containers/settingsBarContainer.js/SettingsBarContainer\";\r\nimport PaletteAreaContainer from \"./containers/paletteAreaContainer/PaletteAreaContainer\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [contrastStandard, setContrastStandard] = useState(\"aa\");\r\n  const [grayscale, setGrayscale] = useState(false);\r\n  const [theme, setTheme] = useState(\"both\");\r\n  const [showPaletteInput, setShowPaletteInput] = useState(true);\r\n  // const [showPaletteExport, setShowPaletteExport] = useState(false);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <nav className=\"app__settings-bar\">\r\n        <SettingsBar\r\n          contrastStandard={contrastStandard}\r\n          setContrastStandard={setContrastStandard}\r\n          grayscale={grayscale}\r\n          setGrayscale={setGrayscale}\r\n          theme={theme}\r\n          setTheme={setTheme}\r\n          showPaletteInput={showPaletteInput}\r\n          setShowPaletteInput={setShowPaletteInput}\r\n          // showPaletteExport={showPaletteExport}\r\n          // setShowPaletteExport={setShowPaletteExport}\r\n        />\r\n      </nav>\r\n      <main className=\"app__main\">\r\n        <PaletteAreaContainer\r\n          contrastStandard={contrastStandard}\r\n          grayscale={grayscale}\r\n          theme={theme}\r\n          showPaletteInput={showPaletteInput}\r\n          setShowPaletteInput={setShowPaletteInput}\r\n          // showPaletteExport={showPaletteExport}\r\n          // setShowPaletteExport={setShowPaletteExport}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}