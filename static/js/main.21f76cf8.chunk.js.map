{"version":3,"sources":["components/radioButtonGroup/RadioButtonGroup.js","components/toggleSwitch/ToggleSwitch.js","components/iconButton/IconButton.js","containers/settingsBarContainer/SettingsBarContainer.js","components/paletteInput/PaletteInput.js","containers/paletteAreaContainer/PaletteAreaContainerHelpers.js","containers/paletteInputContainer/PaletteInputContainerHelpers.js","containers/paletteInputContainer/PaletteInputContainer.js","components/colorPair/ColorPair.js","components/colorStripe/ColorStripe.js","containers/colorStripeContainer/ColorStripeContainer.js","components/paletteDisplay/PaletteDisplay.js","containers/paletteAreaContainer/PaletteAreaContainer.js","App.js","reportWebVitals.js","index.js"],"names":["RadioButtonGroup","heading","name","options","disabled","selected","setState","handleChange","event","target","value","clickability","className","role","aria-labelledby","id","map","option","isSelected","htmlFor","type","onChange","checked","ToggleSwitch","optionLabels","showLabels","state","false","true","IconButton","icon","disableOnClick","onClick","onMouseDown","preventDefault","Provider","SettingsBarContainer","contrastStandard","setContrastStandard","grayscale","setGrayscale","setPreviousGrayscale","theme","setTheme","setPreviousTheme","noDarkColors","noLightColors","showPaletteInput","setShowPaletteInput","contrastStandardProps","themeProps","grayscaleProps","editPaletteProps","PaletteInput","rawPalette","handleInputChange","handleInputSubmit","disableSubmit","clearInputProps","pastePaletteProps","aria-label","onSubmit","aria-multiline","placeholder","rows","cols","spellCheck","differenceBetween","newPaletteArray","previousPaletteArray","length","i","getAllColorPairData","paletteData","rawColorPairs","forEach","colorOuter","hex","colorInner","iStop","jStop","j","color1","color2","hex1","hex2","setColorPairData","grayscaleEquivalent","contrast","getContrast","luminance","Math","round","Number","EPSILON","getRawColorPairs","allFilteredColorPairs","maxPairsCount","Object","entries","color","getFilteredColorPairs","aa","aaa","aaPairsCount","luminance1","luminance2","key","value1","value2","pairingData","sortedColorPairs","pairing","push","assign","sort","a","b","getSortedColorPairs","filter","pair","noThemeInPalette","some","values","includes","parseChannels","channelsRaw","channelMatch","match","checkRgbChannels","rgbChannels","channel","checkHslChannels","hslChannels","index","max","hexToRgb","exec","parseInt","rgbToHex","rgbChannel","hexChannel","toString","hslToRgb","h","s","l","min","f","n","k","addParsedColor","parsedPalette","newColorValue","rgb","thresholdLuminance","sqrt","getPaletteData","channelLuminance","sRgb","getLuminance","rgbGrayEquivalent","singleChannelHex","repeat","getGrayscaleEquivalent","colorData","setInputText","newInputText","inputTextArea","document","getElementById","getOwnPropertyDescriptor","window","HTMLTextAreaElement","prototype","set","call","dispatchEvent","Event","bubbles","PaletteInputContainer","setPaletteData","useState","setRawPalette","setParsedPalette","previousParsedPalette","setPreviousParsedPalette","paletteLength","setPaletteLength","useEffect","navigator","clipboard","readText","then","clipboardText","rawPaletteInput","hexMatch","hexRaw","toLowerCase","rgbMatch","rgbRaw","checkedRgbChannels","hslMatch","hslRaw","parseRawPalette","ColorPair","pairColor","pairGrayscaleEquivalent","hoverGrowClass","textSize","hidePairs","style","data-testid","ColorStripe","stripeColor","filteredColorPairs","placeholdersRequired","stripeTheme","backgroundColor","minHeight","colorPair","flex","ColorStripeContainer","displayStripe","colorPairs","PaletteDisplay","allColorPairs","PaletteAreaContainer","setNoDarkColors","setNoLightColors","previousPaletteData","setPreviousPaletteData","setAllColorPairs","setMaxPairsCount","maxPairs","App","previousGrayscale","previousTheme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.21f76cf8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./RadioButtonGroup.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction RadioButtonGroup({\r\n  heading,\r\n  name,\r\n  options,\r\n  disabled,\r\n  selected,\r\n  setState\r\n}) {\r\n  const handleChange = (event) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  const clickability = disabled ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <form className={`radio-button-group radio-button-group--${clickability}`}>\r\n      <section\r\n        className=\"radio-button-group__container\"\r\n        role=\"radiogroup\"\r\n        aria-labelledby={name}\r\n      >\r\n        <h1 className=\"radio-button-group__heading\" id={name}>\r\n          {heading}\r\n        </h1>\r\n        {options.map((option) => {\r\n          const isSelected =\r\n            option === selected ? \" radio-button-group__label--selected\" : \"\";\r\n          return (\r\n            <label\r\n              key={option}\r\n              htmlFor={option}\r\n              className={`radio-button-group__label${isSelected}`}\r\n            >\r\n              <input\r\n                className=\"radio-button-group__input\"\r\n                type=\"radio\"\r\n                name={name}\r\n                id={option}\r\n                value={option}\r\n                onChange={handleChange}\r\n                checked={option === selected}\r\n                disabled={disabled}\r\n              />\r\n              <span className=\"radio-button-group__label-text\">{option}</span>\r\n            </label>\r\n          );\r\n        })}\r\n      </section>\r\n    </form>\r\n  );\r\n}\r\n\r\nRadioButtonGroup.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  selected: PropTypes.string.isRequired,\r\n  setState: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RadioButtonGroup;\r\n","import React from \"react\";\r\n\r\nimport \"./ToggleSwitch.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ToggleSwitch({\r\n  heading,\r\n  name,\r\n  optionLabels,\r\n  showLabels,\r\n  disabled,\r\n  state,\r\n  setState\r\n}) {\r\n  const handleChange = (event) => {\r\n    setState(event.target.value === optionLabels.true);\r\n  };\r\n\r\n  const clickability = disabled ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <form\r\n      className={`toggle-switch toggle-switch--${state} toggle-switch--${clickability}`}\r\n    >\r\n      <label htmlFor={name} className=\"toggle-switch__label\">\r\n        <h1 className=\"toggle-switch__heading\">{heading}</h1>\r\n        <input\r\n          className=\"toggle-switch__input\"\r\n          type=\"checkbox\"\r\n          name={name}\r\n          id={name}\r\n          value={state ? optionLabels.false : optionLabels.true}\r\n          onChange={handleChange}\r\n          checked={state}\r\n          disabled={disabled}\r\n        />\r\n        <div className=\"toggle-switch__container\">\r\n          <div className=\"toggle-switch__sliding-container\">\r\n            <div className=\"toggle-switch__text-container\">\r\n              <span className=\"toggle-switch__text-true\">\r\n                {showLabels && optionLabels.true}\r\n              </span>\r\n            </div>\r\n            <div className=\"toggle-switch__circle\"></div>\r\n            <div className=\"toggle-switch__text-container\">\r\n              <span className=\"toggle-switch__text-false\">\r\n                {showLabels && optionLabels.false}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\n\r\nToggleSwitch.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  optionLabels: PropTypes.objectOf(PropTypes.string).isRequired,\r\n  showLabels: PropTypes.bool.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  state: PropTypes.bool.isRequired,\r\n  setState: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import React from \"react\";\r\n\r\nimport { IconContext } from \"react-icons\";\r\n\r\nimport \"./IconButton.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction IconButton({ heading, name, icon, disableOnClick, state, setState }) {\r\n  const handleClick = () => {\r\n    setState();\r\n  };\r\n\r\n  const preventFocusOnClick = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const clickability = disableOnClick && state ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <button\r\n      className={`icon-button icon-button--${clickability}`}\r\n      type=\"button\"\r\n      name={name}\r\n      onClick={handleClick}\r\n      onMouseDown={preventFocusOnClick}\r\n      disabled={disableOnClick && state}\r\n    >\r\n      <IconContext.Provider value={{ className: \"icon-button__icon\" }}>\r\n        {icon}\r\n      </IconContext.Provider>\r\n      <h1 className=\"icon-button__heading\">{heading}</h1>\r\n    </button>\r\n  );\r\n}\r\n\r\nIconButton.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  icon: PropTypes.element.isRequired,\r\n  disableOnClick: PropTypes.bool.isRequired,\r\n  state: PropTypes.bool.isRequired,\r\n  setState: PropTypes.func.isRequired\r\n};\r\n\r\nexport default IconButton;\r\n","import React from \"react\";\r\n\r\nimport RadioButtonGroup from \"../../components/radioButtonGroup/RadioButtonGroup\";\r\nimport ToggleSwitch from \"../../components/toggleSwitch/ToggleSwitch\";\r\nimport IconButton from \"../../components/iconButton/IconButton\";\r\n\r\nimport { FaPalette } from \"react-icons/fa\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction SettingsBarContainer({\r\n  contrastStandard,\r\n  setContrastStandard,\r\n  grayscale,\r\n  setGrayscale,\r\n  setPreviousGrayscale,\r\n  theme,\r\n  setTheme,\r\n  setPreviousTheme,\r\n  noDarkColors,\r\n  noLightColors,\r\n  showPaletteInput,\r\n  setShowPaletteInput\r\n}) {\r\n  const contrastStandardProps = {\r\n    heading: \"WCAG \\n standard\",\r\n    name: \"contrast-standard\",\r\n    options: [\"aa\", \"aaa\"],\r\n    disabled: showPaletteInput,\r\n    selected: contrastStandard,\r\n    setState: setContrastStandard\r\n  };\r\n\r\n  const themeProps = {\r\n    heading: \"Theme\",\r\n    name: \"theme\",\r\n    options: [\"dark\", \"both\", \"light\"],\r\n    disabled: showPaletteInput || noDarkColors || noLightColors,\r\n    selected: theme,\r\n    setState: setTheme\r\n  };\r\n\r\n  const grayscaleProps = {\r\n    heading: \"Grayscale \\n mode\",\r\n    name: \"grayscale-mode\",\r\n    optionLabels: { true: \"on\", false: \"off\" },\r\n    showLabels: true,\r\n    disabled: showPaletteInput,\r\n    state: grayscale,\r\n    setState: setGrayscale\r\n  };\r\n\r\n  const editPaletteSetState = () => {\r\n    setPreviousGrayscale(grayscale);\r\n    setPreviousTheme(theme);\r\n\r\n    setShowPaletteInput(true);\r\n  };\r\n\r\n  const editPaletteProps = {\r\n    heading: \"Edit \\n palette\",\r\n    name: \"edit-palette\",\r\n    icon: <FaPalette />,\r\n    disableOnClick: true,\r\n    state: showPaletteInput,\r\n    setState: editPaletteSetState\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <RadioButtonGroup {...contrastStandardProps} />\r\n      <RadioButtonGroup {...themeProps} />\r\n      <ToggleSwitch {...grayscaleProps} />\r\n      <IconButton {...editPaletteProps} />\r\n    </>\r\n  );\r\n}\r\n\r\nSettingsBarContainer.propTypes = {\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  setContrastStandard: PropTypes.func.isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  setGrayscale: PropTypes.func.isRequired,\r\n  setPreviousGrayscale: PropTypes.func.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired,\r\n  setTheme: PropTypes.func.isRequired,\r\n  setPreviousTheme: PropTypes.func.isRequired,\r\n  noDarkColors: PropTypes.bool.isRequired,\r\n  noLightColors: PropTypes.bool.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  setShowPaletteInput: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsBarContainer;\r\n","import React from \"react\";\r\n\r\nimport IconButton from \"../../components/iconButton/IconButton\";\r\n\r\nimport \"./PaletteInput.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction PaletteInput({\r\n  rawPalette,\r\n  handleInputChange,\r\n  handleInputSubmit,\r\n  disableSubmit,\r\n  clearInputProps,\r\n  pastePaletteProps\r\n}) {\r\n  const clickability = disableSubmit ? \"disabled\" : \"clickable\";\r\n\r\n  return (\r\n    <section className=\"palette-input\">\r\n      <form aria-label=\"form\" onSubmit={handleInputSubmit}>\r\n        <section className=\"palette-input__top-controls\">\r\n          <label className=\"palette-input__heading\" htmlFor=\"palette-input\">\r\n            Add palette\r\n          </label>\r\n          <input\r\n            className={`palette-input__submit-button palette-input__submit-button--${clickability}`}\r\n            type=\"submit\"\r\n            value=\"+\"\r\n            disabled={disableSubmit}\r\n          />\r\n        </section>\r\n        <textarea\r\n          className=\"palette-input__text-area\"\r\n          type=\"textarea\"\r\n          name=\"palette-input\"\r\n          id=\"palette-input\"\r\n          aria-multiline=\"true\"\r\n          placeholder=\"Enter a color palette\"\r\n          rows={12}\r\n          cols={36}\r\n          value={rawPalette}\r\n          onChange={handleInputChange}\r\n          spellCheck=\"false\"\r\n        />\r\n        <section className=\"palette-input__bottom-controls\">\r\n          <IconButton {...clearInputProps} />\r\n          <IconButton {...pastePaletteProps} />\r\n        </section>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nPaletteInput.propTypes = {\r\n  rawPalette: PropTypes.string.isRequired,\r\n  handleInputChange: PropTypes.func.isRequired,\r\n  handleInputSubmit: PropTypes.func.isRequired,\r\n  disableSubmit: PropTypes.bool.isRequired,\r\n  clearInputProps: PropTypes.object.isRequired,\r\n  pastePaletteProps: PropTypes.object.isRequired\r\n};\r\n\r\nexport default PaletteInput;\r\n","export function differenceBetween(newPaletteArray, previousPaletteArray) {\r\n  if (newPaletteArray === previousPaletteArray) return false;\r\n  if (newPaletteArray.length !== previousPaletteArray.length) return true;\r\n\r\n  for (let i = newPaletteArray.length - 1; i >= 0; i--) {\r\n    if (newPaletteArray[i][\"hex\"] !== previousPaletteArray[i][\"hex\"])\r\n      return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function getAllColorPairData(paletteData) {\r\n  const rawColorPairs = getRawColorPairs(paletteData);\r\n\r\n  const allFilteredColorPairs = {};\r\n  let maxPairsCount = 0;\r\n\r\n  for (const [color, pairingData] of Object.entries(rawColorPairs)) {\r\n    const [aa, aaa] = getFilteredColorPairs(pairingData);\r\n\r\n    allFilteredColorPairs[color] = {};\r\n\r\n    allFilteredColorPairs[color][\"aa\"] = aa;\r\n    allFilteredColorPairs[color][\"aaa\"] = aaa;\r\n\r\n    const aaPairsCount = aa.length;\r\n    allFilteredColorPairs[color][\"aaPairsCount\"] = aaPairsCount;\r\n    allFilteredColorPairs[color][\"aaaPairsCount\"] = aaa.length;\r\n\r\n    if (aaPairsCount > maxPairsCount) {\r\n      maxPairsCount = aaPairsCount;\r\n    }\r\n  }\r\n\r\n  return [allFilteredColorPairs, maxPairsCount];\r\n}\r\n\r\nfunction getRawColorPairs(paletteData) {\r\n  const rawColorPairs = {};\r\n\r\n  // These loops just set up empty nested objects to store color-pair data\r\n  paletteData.forEach((colorOuter) => {\r\n    rawColorPairs[colorOuter.hex] = {};\r\n\r\n    paletteData.forEach((colorInner) => {\r\n      if (colorInner.hex !== colorOuter.hex) {\r\n        rawColorPairs[colorOuter.hex][colorInner.hex] = {};\r\n      }\r\n    });\r\n  });\r\n\r\n  const iStop = paletteData.length - 1;\r\n  const jStop = paletteData.length;\r\n  for (let i = 0; i < iStop; i++) {\r\n    for (let j = i + 1; j < jStop; j++) {\r\n      const color1 = paletteData[i];\r\n      const color2 = paletteData[j];\r\n\r\n      const hex1 = color1.hex;\r\n      const hex2 = color2.hex;\r\n\r\n      setColorPairData(\r\n        rawColorPairs,\r\n        hex1,\r\n        hex2,\r\n        \"grayscaleEquivalent\",\r\n        color2.grayscaleEquivalent,\r\n        color1.grayscaleEquivalent\r\n      );\r\n\r\n      let contrast = getContrast(color1.luminance, color2.luminance);\r\n      contrast = Math.round((contrast + Number.EPSILON) * 10) / 10;\r\n      setColorPairData(rawColorPairs, hex1, hex2, \"contrast\", contrast);\r\n\r\n      if (contrast >= 7) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Any\");\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aaa\", \"Any\");\r\n      } else if (contrast >= 4.5) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Any\");\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aaa\", \"Large\");\r\n      } else if (contrast >= 3) {\r\n        setColorPairData(rawColorPairs, hex1, hex2, \"aa\", \"Large\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return rawColorPairs;\r\n}\r\n\r\nfunction getContrast(luminance1, luminance2) {\r\n  let contrast;\r\n\r\n  if (luminance1 > luminance2) {\r\n    contrast = (luminance1 + 0.05) / (luminance2 + 0.05);\r\n  } else {\r\n    contrast = (luminance2 + 0.05) / (luminance1 + 0.05);\r\n  }\r\n\r\n  return contrast;\r\n}\r\n\r\nfunction setColorPairData(rawColorPairs, hex1, hex2, key, value1, value2) {\r\n  rawColorPairs[hex1][hex2][key] = value1;\r\n  rawColorPairs[hex2][hex1][key] = value2 || value1;\r\n}\r\n\r\nfunction getFilteredColorPairs(pairingData) {\r\n  const sortedColorPairs = getSortedColorPairs(pairingData);\r\n\r\n  const aa = sortedColorPairs.filter((pair) => \"aa\" in pair);\r\n  const aaa = aa.filter((pair) => \"aaa\" in pair);\r\n\r\n  return [aa, aaa];\r\n}\r\n\r\nfunction getSortedColorPairs(pairingData) {\r\n  const sortedColorPairs = [];\r\n\r\n  Object.entries(pairingData).forEach((pairing) => {\r\n    sortedColorPairs.push(Object.assign({}, { hex: pairing[0] }, pairing[1]));\r\n  });\r\n\r\n  sortedColorPairs.sort((a, b) => {\r\n    return b.contrast - a.contrast;\r\n  });\r\n\r\n  return sortedColorPairs;\r\n}\r\n\r\nexport function noThemeInPalette(paletteData, theme) {\r\n  return !paletteData.some((color) => Object.values(color).includes(theme));\r\n}\r\n","export function parseRawPalette(rawPalette) {\r\n  const parsedPalette = [];\r\n  const maxColors = 20;\r\n\r\n  if (!rawPalette) return parsedPalette;\r\n\r\n  const hexPattern = /([a-f\\d]{6})/gi;\r\n  const hexMatch = rawPalette.match(hexPattern);\r\n\r\n  if (hexMatch) {\r\n    for (const hexRaw of hexMatch) {\r\n      if (parsedPalette.length >= maxColors) break;\r\n\r\n      const rgbChannels = hexToRgb(hexRaw);\r\n      const hex = hexRaw.toLowerCase();\r\n\r\n      addParsedColor(hex, rgbChannels, parsedPalette);\r\n    }\r\n  }\r\n\r\n  const rgbPattern = /(rgba?\\(\\d{1,3},?\\s*\\d{1,3},?\\s*\\d{1,3}(,?\\s*\\d?\\.?\\d*)?\\))/gi;\r\n  const rgbMatch = rawPalette.match(rgbPattern);\r\n\r\n  if (rgbMatch) {\r\n    for (const rgbRaw of rgbMatch) {\r\n      if (parsedPalette.length >= maxColors) break;\r\n\r\n      const rgbChannels = parseChannels(rgbRaw);\r\n      const checkedRgbChannels = checkRgbChannels(rgbChannels);\r\n      const hex = rgbToHex(checkedRgbChannels);\r\n\r\n      addParsedColor(hex, checkedRgbChannels, parsedPalette);\r\n    }\r\n  }\r\n\r\n  const hslPattern = /(hsla?\\(\\d{1,3}(deg)?,?\\s*\\d{1,3}%,?\\s*\\d{1,3}%,?\\s*(,?\\s*\\d?\\.?\\d*)?\\))/gi;\r\n  const hslMatch = rawPalette.match(hslPattern);\r\n\r\n  if (hslMatch) {\r\n    for (const hslRaw of hslMatch) {\r\n      if (parsedPalette.length >= maxColors) break;\r\n\r\n      const hslChannels = parseChannels(hslRaw);\r\n      const checkedHslChannels = checkHslChannels(hslChannels);\r\n      const rgbChannels = hslToRgb(checkedHslChannels);\r\n      const hex = rgbToHex(rgbChannels);\r\n\r\n      addParsedColor(hex, rgbChannels, parsedPalette);\r\n    }\r\n  }\r\n\r\n  return parsedPalette;\r\n}\r\n\r\nfunction parseChannels(channelsRaw) {\r\n  const channelPattern = /(\\d{1,3})/gi;\r\n  const channelMatch = channelsRaw.match(channelPattern);\r\n\r\n  if (channelMatch) {\r\n    return [channelMatch[0], channelMatch[1], channelMatch[2]];\r\n  }\r\n}\r\n\r\nfunction checkRgbChannels(rgbChannels) {\r\n  if (rgbChannels.some((channel) => channel > 255)) {\r\n    const correctedRgbChannels = rgbChannels.map((channel) =>\r\n      channel > 255 ? 255 : channel\r\n    );\r\n    return correctedRgbChannels;\r\n  } else {\r\n    return rgbChannels;\r\n  }\r\n}\r\n\r\nfunction checkHslChannels(hslChannels) {\r\n  if (hslChannels[0] > 360 || hslChannels[1] > 100 || hslChannels[2] > 100) {\r\n    const correctedHslChannels = hslChannels.map((channel, index) => {\r\n      let max = index === 0 ? 360 : 100;\r\n      return channel > max ? max : channel;\r\n    });\r\n    return correctedHslChannels;\r\n  } else {\r\n    return hslChannels;\r\n  }\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n  const match = /([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})/i.exec(hex);\r\n\r\n  if (match) {\r\n    return [\r\n      parseInt(match[1], 16),\r\n      parseInt(match[2], 16),\r\n      parseInt(match[3], 16)\r\n    ];\r\n  }\r\n}\r\n\r\nfunction rgbToHex(rgbChannels) {\r\n  let hex = \"\";\r\n\r\n  rgbChannels.forEach((rgbChannel) => {\r\n    let hexChannel = Number(rgbChannel).toString(16);\r\n\r\n    if (hexChannel.length === 1) {\r\n      hexChannel = \"0\" + hexChannel;\r\n    }\r\n\r\n    hex += hexChannel;\r\n  });\r\n\r\n  return hex;\r\n}\r\n\r\nfunction hslToRgb(hslChannels) {\r\n  // Formula from: https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\r\n  const h = hslChannels[0];\r\n  const s = hslChannels[1] / 100;\r\n  const l = hslChannels[2] / 100;\r\n\r\n  const a = s * Math.min(l, 1 - l);\r\n\r\n  const f = (n, k = (n + h / 30) % 12) =>\r\n    Math.round(255 * (l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1))));\r\n\r\n  return [f(0), f(8), f(4)];\r\n}\r\n\r\nfunction addParsedColor(hex, rgbChannels, parsedPalette) {\r\n  const newColorValue = {\r\n    hex: hex,\r\n    rgb: rgbChannels\r\n  };\r\n\r\n  const isDuplicate = parsedPalette.some(\r\n    (color) => color.hex === newColorValue.hex\r\n  );\r\n\r\n  if (!isDuplicate) {\r\n    parsedPalette.push(newColorValue);\r\n  }\r\n}\r\n\r\n// The quadratic formula is used to solve for \"threshold luminance\" i.e. the luminance which has equal contrast with black or white.\r\nconst thresholdLuminance = (-0.1 + Math.sqrt(0.21)) / 2;\r\n\r\nexport function getPaletteData(parsedPalette) {\r\n  const paletteData = [];\r\n\r\n  parsedPalette.forEach((color) => {\r\n    const luminance = getLuminance(color.rgb);\r\n    const grayscaleEquivalent = getGrayscaleEquivalent(color.rgb);\r\n    const theme = luminance >= thresholdLuminance ? \"light\" : \"dark\";\r\n\r\n    const colorData = {\r\n      hex: color.hex,\r\n      grayscaleEquivalent: grayscaleEquivalent,\r\n      luminance: luminance,\r\n      theme: theme\r\n    };\r\n\r\n    paletteData.push(colorData);\r\n  });\r\n\r\n  return paletteData;\r\n}\r\n\r\nfunction getLuminance(rgb) {\r\n  const channelLuminance = [];\r\n\r\n  rgb.forEach((channel, index) => {\r\n    const sRgb = channel / 255;\r\n    if (sRgb <= 0.03928) {\r\n      channelLuminance[index] = sRgb / 12.92;\r\n    } else {\r\n      channelLuminance[index] = ((sRgb + 0.055) / 1.055) ** 2.4;\r\n    }\r\n  });\r\n\r\n  const relativeLuminance =\r\n    0.2126 * channelLuminance[0] +\r\n    0.7152 * channelLuminance[1] +\r\n    0.0722 * channelLuminance[2];\r\n\r\n  return relativeLuminance;\r\n}\r\n\r\nfunction getGrayscaleEquivalent(rgb) {\r\n  const rgbGrayEquivalent = 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];\r\n\r\n  let singleChannelHex = Math.round(rgbGrayEquivalent).toString(16);\r\n  if (singleChannelHex.length === 1) {\r\n    singleChannelHex = \"0\" + singleChannelHex;\r\n  }\r\n  return singleChannelHex.repeat(3);\r\n}\r\n\r\nexport function setInputText(newInputText) {\r\n  const inputTextArea = document.getElementById(\"palette-input\");\r\n\r\n  const nativeInputValueSetter = Object.getOwnPropertyDescriptor(\r\n    window.HTMLTextAreaElement.prototype,\r\n    \"value\"\r\n  ).set;\r\n  nativeInputValueSetter.call(inputTextArea, newInputText);\r\n\r\n  inputTextArea.dispatchEvent(new Event(\"change\", { bubbles: true }));\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport PaletteInput from \"../../components/paletteInput/PaletteInput\";\r\n\r\nimport { FaTrash, FaPaste } from \"react-icons/fa\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { differenceBetween } from \"../paletteAreaContainer/PaletteAreaContainerHelpers\";\r\nimport {\r\n  parseRawPalette,\r\n  getPaletteData,\r\n  setInputText\r\n} from \"./PaletteInputContainerHelpers\";\r\n\r\nfunction PaletteInputContainer({\r\n  showPaletteInput,\r\n  setPaletteData,\r\n  handleInputSubmit\r\n}) {\r\n  const [rawPalette, setRawPalette] = useState(\"\");\r\n  const [parsedPalette, setParsedPalette] = useState(false);\r\n  const [previousParsedPalette, setPreviousParsedPalette] = useState(\r\n    parsedPalette\r\n  );\r\n  const [paletteLength, setPaletteLength] = useState(0);\r\n\r\n  const handleInputChange = (event) => {\r\n    const rawPaletteInput = event.target.value;\r\n\r\n    setParsedPalette(parseRawPalette(event.target.value));\r\n\r\n    setRawPalette(rawPaletteInput);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      parsedPalette &&\r\n      differenceBetween(parsedPalette, previousParsedPalette)\r\n    ) {\r\n      setPreviousParsedPalette(parsedPalette);\r\n\r\n      setPaletteData(getPaletteData(parsedPalette));\r\n      setPaletteLength(parsedPalette.length);\r\n    }\r\n  }, [parsedPalette, previousParsedPalette, setPaletteData]);\r\n\r\n  const clearInputSetState = () => {\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const clearInputProps = {\r\n    heading: \"Clear palette\",\r\n    name: \"clear-palette\",\r\n    icon: <FaTrash />,\r\n    disableOnClick: true,\r\n    state: rawPalette === \"\",\r\n    setState: clearInputSetState\r\n  };\r\n\r\n  const pastePaletteSetState = () => {\r\n    navigator.clipboard.readText().then((clipboardText) => {\r\n      setInputText(clipboardText);\r\n    });\r\n  };\r\n\r\n  const pastePaletteProps = {\r\n    heading: \"Paste clipboard\",\r\n    name: \"paste-palette\",\r\n    icon: <FaPaste />,\r\n    disableOnClick: false,\r\n    state: false,\r\n    setState: pastePaletteSetState\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showPaletteInput && (\r\n        <PaletteInput\r\n          rawPalette={rawPalette}\r\n          handleInputChange={handleInputChange}\r\n          handleInputSubmit={handleInputSubmit}\r\n          disableSubmit={paletteLength < 2}\r\n          clearInputProps={clearInputProps}\r\n          pastePaletteProps={pastePaletteProps}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nPaletteInputContainer.propTypes = {\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  setPaletteData: PropTypes.func.isRequired,\r\n  handleInputSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PaletteInputContainer;\r\n","import React from \"react\";\r\n\r\nimport { IconContext } from \"react-icons\";\r\nimport { RiHeartAddLine } from \"react-icons/ri\";\r\n\r\nimport \"./ColorPair.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ColorPair({\r\n  pairColor,\r\n  pairGrayscaleEquivalent,\r\n  contrast,\r\n  hoverGrowClass,\r\n  textSize,\r\n  hidePairs,\r\n  grayscale\r\n}) {\r\n  return (\r\n    <article\r\n      className={`color-pair${hidePairs}${hoverGrowClass}`}\r\n      style={{ color: `#${grayscale ? pairGrayscaleEquivalent : pairColor}` }}\r\n      data-testid=\"color-pair\"\r\n    >\r\n      <p className=\"color-pair__contrast\">\r\n        {Math.round((contrast + Number.EPSILON) * 10) / 10} : 1\r\n      </p>\r\n      <h1 className=\"color-pair__heading\">{pairColor}</h1>\r\n      <IconContext.Provider value={{ className: \"color-pair__heart\" }}>\r\n        <RiHeartAddLine />\r\n      </IconContext.Provider>\r\n      <p className={`color-pair__text-size color-pair__text-size--${textSize}`}>\r\n        {textSize} font\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nColorPair.propTypes = {\r\n  pairColor: PropTypes.string.isRequired,\r\n  pairGrayscaleEquivalent: PropTypes.string.isRequired,\r\n  contrast: PropTypes.number.isRequired,\r\n  hoverGrowClass: PropTypes.string.isRequired,\r\n  textSize: PropTypes.string.isRequired,\r\n  hidePairs: PropTypes.string.isRequired,\r\n  grayscale: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default ColorPair;\r\n","import React from \"react\";\r\n\r\nimport ColorPair from \"../colorPair/ColorPair\";\r\n\r\nimport \"./ColorStripe.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ColorStripe({\r\n  stripeColor,\r\n  grayscaleEquivalent,\r\n  filteredColorPairs,\r\n  maxPairsCount,\r\n  placeholdersRequired,\r\n  hoverGrowClass,\r\n  hidePairs,\r\n  contrastStandard,\r\n  grayscale,\r\n  stripeTheme\r\n}) {\r\n  return (\r\n    <section\r\n      className=\"color-stripe\"\r\n      style={{\r\n        backgroundColor: `#${grayscale ? grayscaleEquivalent : stripeColor}`\r\n      }}\r\n      data-testid=\"color-stripe\"\r\n    >\r\n      <section\r\n        className=\"color-stripe__pairs-container\"\r\n        style={{ minHeight: `${maxPairsCount * 4 + 12}em` }}\r\n      >\r\n        {filteredColorPairs &&\r\n          filteredColorPairs.map((colorPair) => {\r\n            return (\r\n              <ColorPair\r\n                key={colorPair.hex}\r\n                pairColor={colorPair.hex}\r\n                pairGrayscaleEquivalent={colorPair.grayscaleEquivalent}\r\n                contrast={colorPair.contrast}\r\n                hoverGrowClass={hoverGrowClass}\r\n                textSize={colorPair[contrastStandard]}\r\n                hidePairs={hidePairs}\r\n                grayscale={grayscale}\r\n              />\r\n            );\r\n          })}\r\n        {placeholdersRequired > 0 && (\r\n          <div\r\n            className=\"color-stripe__placeholder\"\r\n            style={{\r\n              flex: `${placeholdersRequired} ${placeholdersRequired} ${placeholdersRequired}em`\r\n            }}\r\n          ></div>\r\n        )}\r\n      </section>\r\n      <h1\r\n        className={`color-stripe__heading color-stripe__heading--theme-${stripeTheme} color-stripe__heading--${stripeColor}`}\r\n      >\r\n        {stripeColor}\r\n        <style>\r\n          {`.color-stripe__heading--${stripeColor} {\r\n            background: linear-gradient(to top, #${stripeColor}, 60%, transparent 105%);\r\n          }`}\r\n        </style>\r\n      </h1>\r\n    </section>\r\n  );\r\n}\r\n\r\nColorStripe.propTypes = {\r\n  stripeColor: PropTypes.string.isRequired,\r\n  grayscaleEquivalent: PropTypes.string.isRequired,\r\n  filteredColorPairs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      hex: PropTypes.string.isRequired,\r\n      grayscaleEquivalent: PropTypes.string.isRequired,\r\n      contrast: PropTypes.number.isRequired,\r\n      aa: PropTypes.string.isRequired,\r\n      aaa: PropTypes.string\r\n    })\r\n  ),\r\n  placeholdersRequired: PropTypes.number,\r\n  hoverGrowClass: PropTypes.string.isRequired,\r\n  hidePairs: PropTypes.string.isRequired,\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  stripeTheme: PropTypes.oneOf([\"dark\", \"light\"]).isRequired\r\n};\r\n\r\nexport default ColorStripe;\r\n","import React from \"react\";\r\n\r\nimport ColorStripe from \"../../components/colorStripe/ColorStripe\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ColorStripeContainer({\r\n  color,\r\n  colorPairs,\r\n  maxPairsCount,\r\n  showPaletteInput,\r\n  contrastStandard,\r\n  grayscale,\r\n  theme\r\n}) {\r\n  let displayStripe;\r\n  if (theme === \"both\" || theme === color.theme) {\r\n    displayStripe = true;\r\n  } else {\r\n    displayStripe = false;\r\n  }\r\n\r\n  const hidePairs = showPaletteInput ? \" color-pair--hide\" : \"\";\r\n\r\n  const placeholdersRequired = {};\r\n  if (colorPairs) {\r\n    placeholdersRequired[\"aa\"] = maxPairsCount - colorPairs[\"aaPairsCount\"];\r\n    placeholdersRequired[\"aaa\"] = maxPairsCount - colorPairs[\"aaaPairsCount\"];\r\n  }\r\n\r\n  const hoverGrowClass =\r\n    maxPairsCount > 5 ? \" color-pair--enable-hover-grow\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      {displayStripe && (\r\n        <ColorStripe\r\n          stripeColor={color.hex}\r\n          grayscaleEquivalent={color.grayscaleEquivalent}\r\n          filteredColorPairs={colorPairs && colorPairs[contrastStandard]}\r\n          maxPairsCount={maxPairsCount}\r\n          placeholdersRequired={\r\n            colorPairs && placeholdersRequired[contrastStandard]\r\n          }\r\n          hoverGrowClass={hoverGrowClass}\r\n          hidePairs={hidePairs}\r\n          contrastStandard={contrastStandard}\r\n          grayscale={grayscale}\r\n          stripeTheme={color.theme}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nColorStripeContainer.propTypes = {\r\n  color: PropTypes.shape({\r\n    hex: PropTypes.string.isRequired,\r\n    grayscaleEquivalent: PropTypes.string.isRequired,\r\n    luminance: PropTypes.number.isRequired,\r\n    theme: PropTypes.oneOf([\"dark\", \"light\"]).isRequired\r\n  }).isRequired,\r\n  colorPairs: PropTypes.shape({\r\n    aa: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        hex: PropTypes.string.isRequired,\r\n        grayscaleEquivalent: PropTypes.string.isRequired,\r\n        contrast: PropTypes.number.isRequired,\r\n        aa: PropTypes.string.isRequired,\r\n        aaa: PropTypes.string\r\n      }).isRequired\r\n    ).isRequired,\r\n    aaPairsCount: PropTypes.number.isRequired,\r\n    aaa: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        hex: PropTypes.string.isRequired,\r\n        grayscaleEquivalent: PropTypes.string.isRequired,\r\n        contrast: PropTypes.number.isRequired,\r\n        aa: PropTypes.string.isRequired,\r\n        aaa: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    aaaPairsCount: PropTypes.number.isRequired\r\n  }),\r\n  maxPairsCount: PropTypes.number.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired\r\n};\r\n\r\nexport default ColorStripeContainer;\r\n","import React from \"react\";\r\n\r\nimport ColorStripeContainer from \"../../containers/colorStripeContainer/ColorStripeContainer\";\r\n\r\nimport \"./PaletteDisplay.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction PaletteDisplay({\r\n  paletteData,\r\n  allColorPairs,\r\n  maxPairsCount,\r\n  showPaletteInput,\r\n  contrastStandard,\r\n  grayscale,\r\n  theme\r\n}) {\r\n  return (\r\n    <section className=\"palette-display\">\r\n      {paletteData.map((color) => {\r\n        return (\r\n          <ColorStripeContainer\r\n            key={color.hex}\r\n            color={color}\r\n            colorPairs={allColorPairs[color.hex]}\r\n            maxPairsCount={maxPairsCount}\r\n            showPaletteInput={showPaletteInput}\r\n            contrastStandard={contrastStandard}\r\n            grayscale={grayscale}\r\n            theme={theme}\r\n          />\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n\r\nPaletteDisplay.propTypes = {\r\n  paletteData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      hex: PropTypes.string.isRequired,\r\n      grayscaleEquivalent: PropTypes.string.isRequired,\r\n      luminance: PropTypes.number.isRequired,\r\n      theme: PropTypes.oneOf([\"dark\", \"light\"]).isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  allColorPairs: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      aa: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          hex: PropTypes.string.isRequired,\r\n          grayscaleEquivalent: PropTypes.string.isRequired,\r\n          contrast: PropTypes.number.isRequired,\r\n          aa: PropTypes.string.isRequired,\r\n          aaa: PropTypes.string\r\n        }).isRequired\r\n      ),\r\n      aaPairsCount: PropTypes.number.isRequired,\r\n      aaa: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          hex: PropTypes.string.isRequired,\r\n          grayscaleEquivalent: PropTypes.string.isRequired,\r\n          contrast: PropTypes.number.isRequired,\r\n          aa: PropTypes.string.isRequired,\r\n          aaa: PropTypes.string.isRequired\r\n        }).isRequired\r\n      ),\r\n      aaaPairsCount: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  maxPairsCount: PropTypes.number.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired\r\n};\r\n\r\nexport default PaletteDisplay;\r\n","import React, { useState } from \"react\";\r\n\r\nimport PaletteInputContainer from \"../paletteInputContainer/PaletteInputContainer\";\r\nimport PaletteDisplay from \"../../components/paletteDisplay/PaletteDisplay\";\r\n\r\nimport {\r\n  differenceBetween,\r\n  getAllColorPairData,\r\n  noThemeInPalette\r\n} from \"./PaletteAreaContainerHelpers\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction PaletteAreaContainer({\r\n  contrastStandard,\r\n  grayscale,\r\n  theme,\r\n  setNoDarkColors,\r\n  setNoLightColors,\r\n  showPaletteInput,\r\n  setShowPaletteInput\r\n}) {\r\n  const [paletteData, setPaletteData] = useState([]);\r\n  const [previousPaletteData, setPreviousPaletteData] = useState(paletteData);\r\n  const [allColorPairs, setAllColorPairs] = useState({});\r\n  const [maxPairsCount, setMaxPairsCount] = useState(0);\r\n\r\n  const handleInputSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (differenceBetween(paletteData, previousPaletteData)) {\r\n      setPreviousPaletteData(paletteData);\r\n\r\n      const [colorPairs, maxPairs] = getAllColorPairData(paletteData);\r\n\r\n      setAllColorPairs(colorPairs);\r\n      setMaxPairsCount(maxPairs);\r\n\r\n      setNoDarkColors(noThemeInPalette(paletteData, \"dark\"));\r\n      setNoLightColors(noThemeInPalette(paletteData, \"light\"));\r\n    }\r\n\r\n    setShowPaletteInput(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PaletteInputContainer\r\n        showPaletteInput={showPaletteInput}\r\n        setPaletteData={setPaletteData}\r\n        handleInputSubmit={handleInputSubmit}\r\n      />\r\n      <PaletteDisplay\r\n        paletteData={paletteData}\r\n        allColorPairs={allColorPairs}\r\n        maxPairsCount={maxPairsCount}\r\n        showPaletteInput={showPaletteInput}\r\n        contrastStandard={contrastStandard}\r\n        grayscale={grayscale}\r\n        theme={theme}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nPaletteAreaContainer.propTypes = {\r\n  contrastStandard: PropTypes.oneOf([\"aa\", \"aaa\"]).isRequired,\r\n  grayscale: PropTypes.bool.isRequired,\r\n  theme: PropTypes.oneOf([\"dark\", \"both\", \"light\"]).isRequired,\r\n  setNoDarkColors: PropTypes.func.isRequired,\r\n  setNoLightColors: PropTypes.func.isRequired,\r\n  showPaletteInput: PropTypes.bool.isRequired,\r\n  setShowPaletteInput: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PaletteAreaContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport SettingsBarContainer from \"./containers/settingsBarContainer/SettingsBarContainer\";\r\nimport PaletteAreaContainer from \"./containers/paletteAreaContainer/PaletteAreaContainer\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [contrastStandard, setContrastStandard] = useState(\"aa\");\r\n  const [grayscale, setGrayscale] = useState(false);\r\n  const [previousGrayscale, setPreviousGrayscale] = useState(grayscale);\r\n  const [theme, setTheme] = useState(\"both\");\r\n  const [previousTheme, setPreviousTheme] = useState(theme);\r\n  const [noDarkColors, setNoDarkColors] = useState(false);\r\n  const [noLightColors, setNoLightColors] = useState(false);\r\n  const [showPaletteInput, setShowPaletteInput] = useState(true);\r\n  // const [showPaletteExport, setShowPaletteExport] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (showPaletteInput) {\r\n      setGrayscale(false);\r\n      setTheme(\"both\");\r\n\r\n      if (noDarkColors || noLightColors) {\r\n        setPreviousTheme(\"both\");\r\n      }\r\n    } else {\r\n      setGrayscale(previousGrayscale);\r\n\r\n      if (noDarkColors || noLightColors) {\r\n        setTheme(noDarkColors ? \"light\" : \"dark\");\r\n      } else {\r\n        setTheme(previousTheme);\r\n      }\r\n    }\r\n  }, [\r\n    showPaletteInput,\r\n    noDarkColors,\r\n    noLightColors,\r\n    previousGrayscale,\r\n    previousTheme\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <nav className=\"app__settings-bar\">\r\n        <SettingsBarContainer\r\n          contrastStandard={contrastStandard}\r\n          setContrastStandard={setContrastStandard}\r\n          grayscale={grayscale}\r\n          setGrayscale={setGrayscale}\r\n          setPreviousGrayscale={setPreviousGrayscale}\r\n          theme={theme}\r\n          setTheme={setTheme}\r\n          setPreviousTheme={setPreviousTheme}\r\n          noDarkColors={noDarkColors}\r\n          noLightColors={noLightColors}\r\n          showPaletteInput={showPaletteInput}\r\n          setShowPaletteInput={setShowPaletteInput}\r\n          // showPaletteExport={showPaletteExport}\r\n          // setShowPaletteExport={setShowPaletteExport}\r\n        />\r\n      </nav>\r\n      <main className=\"app__main\">\r\n        <PaletteAreaContainer\r\n          contrastStandard={contrastStandard}\r\n          grayscale={grayscale}\r\n          theme={theme}\r\n          setNoDarkColors={setNoDarkColors}\r\n          setNoLightColors={setNoLightColors}\r\n          showPaletteInput={showPaletteInput}\r\n          setShowPaletteInput={setShowPaletteInput}\r\n          // showPaletteExport={showPaletteExport}\r\n          // setShowPaletteExport={setShowPaletteExport}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}